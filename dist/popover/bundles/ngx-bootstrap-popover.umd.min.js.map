{"version":3,"sources":["ng://ngx-bootstrap/popover/popover.config.ts","ng://ngx-bootstrap/popover/popover-container.component.ts","ng://ngx-bootstrap/popover/popover.directive.ts","ng://ngx-bootstrap/popover/popover.module.ts"],"names":["Injectable","PopoverContainerComponent","config","Object","assign","this","defineProperty","prototype","isBs3","Component","args","selector","changeDetection","ChangeDetectionStrategy","OnPush","host","[class]","[class.show]","[class.bs3]","role","style","template","PopoverConfig","Input","PopoverDirective","_config","_elementRef","_renderer","_viewContainerRef","cis","_positionService","_popover","createLoader","provide","useValue","onShown","onHidden","window","nativeElement","addEventListener","focus","err","isShown","value","show","hide","popover","attach","to","container","position","attachment","placement","content","context","popoverContext","title","popoverTitle","containerClass","isOpen","toggle","ngOnInit","_this","_isInited","setOptions","modifiers","flip","enabled","listen","triggers","outsideClick","ngOnDestroy","dispose","Directive","exportAs","ElementRef","Renderer2","ViewContainerRef","ComponentLoaderFactory","PositioningService","Output","PopoverModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","declarations","exports","entryComponents"],"mappings":"2pBAac,oBAKD,2BAEI,6BAZhBA,EAAAA,kBCRDC,EAAA,WAiDE,SAAAA,EAAYC,GACVC,OAAOC,OAAOC,KAAMH,UALtBC,OAAAG,eAAIL,EAAAM,UAAA,QAAK,KAAT,WACE,OAAOC,EAAAA,6DA1CVC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,oBACVC,gBAAiBC,EAAAA,wBAAwBC,OAEzCC,KAAM,CACJC,UACE,+GACFC,eAAgB,SAChBC,cAAe,QACfC,KAAM,UACNC,MAAO,kBAwBTC,SAAA,wNArBE,6eAhBKC,wCAwCNC,EAAAA,qBACAA,EAAAA,WA1CH,gBCkFE,SAAAC,EACEC,EACAC,EACAC,EACAC,EACAC,EACQC,GAAAzB,KAAAyB,iBAAAA,qBArDc,sBAeE,mBA8BN,EAUlBzB,KAAK0B,SAAWF,EACbG,aACCN,EACAE,EACAD,GAEDM,QAAQ,CAACA,QAASX,EAAeY,SAAUT,IAC9CtB,OAAOC,OAAOC,KAAMoB,GACpBpB,KAAK8B,QAAU9B,KAAK0B,SAASI,QAC7B9B,KAAK+B,SAAW/B,KAAK0B,SAASK,SAGR,oBAAXC,QACTX,EAAYY,cAAcC,iBAAiB,QAAS,WAClD,IACEb,EAAYY,cAAcE,QAC1B,MAAOC,GACP,uCAnDJjB,EAAAjB,UAAA,SAAM,gBACR,OAAOF,KAAK0B,SAASW,aAGvB,SAAWC,GACLA,EACFtC,KAAKuC,OAELvC,KAAKwC,wCAqDTrB,EAAAjB,UAAAqC,KAAA,YACMvC,KAAK0B,SAASW,SAAYrC,KAAKyC,UAInCzC,KAAK0B,SACFgB,OAAO9C,GACP+C,GAAG3C,KAAK4C,WACRC,SAAS,CAACC,WAAY9C,KAAK+C,YAC3BR,KAAK,CACJS,QAAShD,KAAKyC,QACdQ,QAASjD,KAAKkD,eACdH,UAAW/C,KAAK+C,UAChBI,MAAOnD,KAAKoD,aACZC,eAAgBrD,KAAKqD,iBAEzBrD,KAAKsD,QAAS,IAOhBnC,EAAAjB,UAAAsC,KAAA,WACMxC,KAAKsD,SACPtD,KAAK0B,SAASc,OACdxC,KAAKsD,QAAS,IAQlBnC,EAAAjB,UAAAqD,OAAA,WACE,GAAIvD,KAAKsD,OACP,OAAOtD,KAAKwC,OAGdxC,KAAKuC,QAGPpB,EAAAjB,UAAAsD,SAAA,WAAA,IAAAC,EAAAzD,KAIMA,KAAK0D,YAGT1D,KAAK0D,WAAY,EAEjB1D,KAAKyB,iBAAiBkC,WAAW,CAC/BC,UAAW,CACTC,KAAM,CACJC,SAAS,MAKf9D,KAAK0B,SAASqC,OAAO,CACnBC,SAAUhE,KAAKgE,SACfC,aAAcjE,KAAKiE,aACnB1B,KAAM,WAAM,OAAAkB,EAAKlB,YAIrBpB,EAAAjB,UAAAgE,YAAA,WACElE,KAAK0B,SAASyC,+BA5KjBC,EAAAA,UAAS/D,KAAA,CAAC,CAACC,SAAU,YAAa+D,SAAU,0DARpCpD,SAHIqD,EAAAA,kBACXC,EAAAA,iBAAwBC,EAAAA,wBAGAC,EAAAA,8BAEjBC,EAAAA,uDAWNxD,EAAAA,8BAKAA,EAAAA,4BAIAA,EAAAA,yBAIAA,EAAAA,4BAIAA,EAAAA,wBAKAA,EAAAA,yBAKAA,EAAAA,8BAKAA,EAAAA,sBAKAA,EAAAA,uBAiBAyD,EAAAA,yBAKAA,EAAAA,eC7EHC,EAAA,gCAgBSA,EAAAC,QAAP,WACE,MAAO,CACLC,SAAUF,EACVG,UAAW,CAAC9D,EAAewD,EAAAA,uBAAwBC,EAAAA,0CAVxDM,EAAAA,SAAQ3E,KAAA,CAAC,CACR4E,QAAS,CAACC,EAAAA,cACVC,aAAc,CAAChE,EAAkBvB,GACjCwF,QAAS,CAACjE,GACVkE,gBAAiB,CAACzF,SAbpB","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * Configuration service for the Popover directive.\r\n * You can inject this service, typically in your root component, and customize\r\n * the values of its properties in order to provide default values for all the\r\n * popovers used in the application.\r\n */\r\n@Injectable()\r\nexport class PopoverConfig {\r\n  /**\r\n   * Placement of a popover. Accepts: \"top\", \"bottom\", \"left\", \"right\", \"auto\"\r\n   */\r\n  placement = 'top';\r\n  /**\r\n   * Specifies events that should trigger. Supports a space separated list of\r\n   * event names.\r\n   */\r\n  triggers = 'click';\r\n\r\n  outsideClick = false;\r\n  /**\r\n   * A selector specifying the element the popover should be appended to.\r\n   * Currently only supports \"body\".\r\n   */\r\n  container: string;\r\n}\r\n","import { ChangeDetectionStrategy, Input, Component } from '@angular/core';\r\nimport { PopoverConfig } from './popover.config';\r\nimport { isBs3 } from 'ngx-bootstrap/utils';\r\n\r\n@Component({\r\n  selector: 'popover-container',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  // tslint:disable-next-line\r\n  host: {\r\n    '[class]':\r\n      '\"popover in popover-\" + placement + \" \" + \"bs-popover-\" + placement + \" \" + placement + \" \" + containerClass',\r\n    '[class.show]': '!isBs3',\r\n    '[class.bs3]': 'isBs3',\r\n    role: 'tooltip',\r\n    style: 'display:block;'\r\n  },\r\n  styles: [\r\n    `\r\n    :host.bs3.popover-top {\r\n      margin-bottom: 10px;\r\n    }\r\n    :host.bs3.popover.top>.arrow {\r\n      margin-left: -2px;\r\n    }\r\n    :host.bs3.popover.top {\r\n      margin-bottom: 10px;\r\n    }\r\n    :host.popover.bottom>.arrow {\r\n      margin-left: -4px;\r\n    }\r\n    :host.bs3.bs-popover-left {\r\n      margin-right: .5rem;\r\n    }\r\n    :host.bs3.bs-popover-right .arrow, :host.bs3.bs-popover-left .arrow{\r\n      margin: .3rem 0;\r\n    }\r\n    `\r\n  ],\r\n  templateUrl: './popover-container.component.html'\r\n})\r\nexport class PopoverContainerComponent {\r\n  @Input() placement: string;\r\n  @Input() title: string;\r\n  containerClass: string;\r\n\r\n  get isBs3(): boolean {\r\n    return isBs3();\r\n  }\r\n\r\n  constructor(config: PopoverConfig) {\r\n    Object.assign(this, config);\r\n  }\r\n}\r\n","import {\r\n  Directive, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output,\r\n  Renderer2, TemplateRef, ViewContainerRef\r\n} from '@angular/core';\r\nimport { PopoverConfig } from './popover.config';\r\nimport { ComponentLoader, ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\r\nimport { PopoverContainerComponent } from './popover-container.component';\r\nimport { PositioningService } from 'ngx-bootstrap/positioning';\r\n\r\n/**\r\n * A lightweight, extensible directive for fancy popover creation.\r\n */\r\n@Directive({selector: '[popover]', exportAs: 'bs-popover'})\r\nexport class PopoverDirective implements OnInit, OnDestroy {\r\n  /**\r\n   * Content to be displayed as popover.\r\n   */\r\n  /* tslint:disable-next-line: no-any */\r\n  @Input() popover: string | TemplateRef<any>;\r\n  /**\r\n   * Context to be used if popover is a template.\r\n   */\r\n  /* tslint:disable-next-line: no-any */\r\n  @Input() popoverContext: any;\r\n  /**\r\n   * Title of a popover.\r\n   */\r\n  @Input() popoverTitle: string;\r\n  /**\r\n   * Placement of a popover. Accepts: \"top\", \"bottom\", \"left\", \"right\"\r\n   */\r\n  @Input() placement: 'top' | 'bottom' | 'left' | 'right' | 'auto';\r\n  /**\r\n   * Close popover on outside click\r\n   */\r\n  @Input() outsideClick = false;\r\n  /**\r\n   * Specifies events that should trigger. Supports a space separated list of\r\n   * event names.\r\n   */\r\n  @Input() triggers: string;\r\n  /**\r\n   * A selector specifying the element the popover should be appended to.\r\n   * Currently only supports \"body\".\r\n   */\r\n  @Input() container: string;\r\n\r\n  /**\r\n   * Css class for popover container\r\n   */\r\n  @Input() containerClass = '';\r\n\r\n  /**\r\n   * Returns whether or not the popover is currently being shown\r\n   */\r\n  @Input()\r\n  get isOpen(): boolean {\r\n    return this._popover.isShown;\r\n  }\r\n\r\n  set isOpen(value: boolean) {\r\n    if (value) {\r\n      this.show();\r\n    } else {\r\n      this.hide();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emits an event when the popover is shown\r\n   */\r\n  /* tslint:disable-next-line: no-any */\r\n  @Output() onShown: EventEmitter<any>;\r\n  /**\r\n   * Emits an event when the popover is hidden\r\n   */\r\n  /* tslint:disable-next-line: no-any */\r\n  @Output() onHidden: EventEmitter<any>;\r\n\r\n  private _popover: ComponentLoader<PopoverContainerComponent>;\r\n  private _isInited = false;\r\n\r\n  constructor(\r\n    _config: PopoverConfig,\r\n    _elementRef: ElementRef,\r\n    _renderer: Renderer2,\r\n    _viewContainerRef: ViewContainerRef,\r\n    cis: ComponentLoaderFactory,\r\n    private _positionService: PositioningService\r\n  ) {\r\n    this._popover = cis\r\n      .createLoader<PopoverContainerComponent>(\r\n        _elementRef,\r\n        _viewContainerRef,\r\n        _renderer\r\n      )\r\n      .provide({provide: PopoverConfig, useValue: _config});\r\n    Object.assign(this, _config);\r\n    this.onShown = this._popover.onShown;\r\n    this.onHidden = this._popover.onHidden;\r\n\r\n    // fix: no focus on button on Mac OS #1795\r\n    if (typeof window !== 'undefined') {\r\n      _elementRef.nativeElement.addEventListener('click', function () {\r\n        try {\r\n          _elementRef.nativeElement.focus();\r\n        } catch (err) {\r\n          return;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Opens an elementâs popover. This is considered a âmanualâ triggering of\r\n   * the popover.\r\n   */\r\n  show(): void {\r\n    if (this._popover.isShown || !this.popover) {\r\n      return;\r\n    }\r\n\r\n    this._popover\r\n      .attach(PopoverContainerComponent)\r\n      .to(this.container)\r\n      .position({attachment: this.placement})\r\n      .show({\r\n        content: this.popover,\r\n        context: this.popoverContext,\r\n        placement: this.placement,\r\n        title: this.popoverTitle,\r\n        containerClass: this.containerClass\r\n      });\r\n    this.isOpen = true;\r\n  }\r\n\r\n  /**\r\n   * Closes an elementâs popover. This is considered a âmanualâ triggering of\r\n   * the popover.\r\n   */\r\n  hide(): void {\r\n    if (this.isOpen) {\r\n      this._popover.hide();\r\n      this.isOpen = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggles an elementâs popover. This is considered a âmanualâ triggering of\r\n   * the popover.\r\n   */\r\n  toggle(): void {\r\n    if (this.isOpen) {\r\n      return this.hide();\r\n    }\r\n\r\n    this.show();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // fix: seems there are an issue with `routerLinkActive`\r\n    // which result in duplicated call ngOnInit without call to ngOnDestroy\r\n    // read more: https://github.com/valor-software/ngx-bootstrap/issues/1885\r\n    if (this._isInited) {\r\n      return;\r\n    }\r\n    this._isInited = true;\r\n\r\n    this._positionService.setOptions({\r\n      modifiers: {\r\n        flip: {\r\n          enabled: true\r\n        }\r\n      }\r\n    });\r\n\r\n    this._popover.listen({\r\n      triggers: this.triggers,\r\n      outsideClick: this.outsideClick,\r\n      show: () => this.show()\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._popover.dispose();\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\r\nimport { PositioningService } from 'ngx-bootstrap/positioning';\r\nimport { PopoverConfig } from './popover.config';\r\nimport { PopoverDirective } from './popover.directive';\r\nimport { PopoverContainerComponent } from './popover-container.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [PopoverDirective, PopoverContainerComponent],\r\n  exports: [PopoverDirective],\r\n  entryComponents: [PopoverContainerComponent]\r\n})\r\nexport class PopoverModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: PopoverModule,\r\n      providers: [PopoverConfig, ComponentLoaderFactory, PositioningService]\r\n    };\r\n  }\r\n}\r\n"]}