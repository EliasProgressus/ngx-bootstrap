{"version":3,"sources":["ng://ngx-bootstrap/rating/rating.component.ts","ng://ngx-bootstrap/rating/rating.module.ts"],"names":["RATING_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","RatingComponent","multi","changeDetection","this","EventEmitter","Function","prototype","onKeydown","event","indexOf","which","preventDefault","stopPropagation","sign","rate","value","ngOnInit","max","titles","length","range","buildTemplateObjects","writeValue","Math","round","preValue","markForCheck","enter","readonly","onHover","emit","reset","onLeave","registerOnChange","fn","onChange","registerOnTouched","onTouched","result","i","push","index","title","Component","args","selector","template","providers","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","Input","Output","HostListener","RatingModule","forRoot","ngModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"qbAAA,IAYaA,EAAiD,CAC5DC,QAASC,EAAAA,kBAETC,YAAaC,EAAAA,WAAW,WAAM,OAAAC,IAC9BC,OAAO,gBAiCP,SAAAD,EAAoBE,GAAAC,KAAAD,gBAAAA,WAtBL,eAS2B,IAAIE,EAAAA,0BAEJ,IAAIA,EAAAA,2BAG9BC,SAASC,yBAERD,SAASC,iBAS1BN,EAAAM,UAAAC,mBAAUC,GAER,IAA+C,IAA3C,CAAC,GAAI,GAAI,GAAI,IAAIC,QAAQD,EAAME,OAAnC,CAIAF,EAAMG,iBACNH,EAAMI,kBAEN,IAAMC,EAAuB,KAAhBL,EAAME,OAAgC,KAAhBF,EAAME,MAAe,GAAK,EAC7DP,KAAKW,KAAKX,KAAKY,MAAQF,KAGzBb,EAAAM,UAAAU,SAAA,WACEb,KAAKc,IAA0B,oBAAbd,KAAKc,IAAsBd,KAAKc,IAAM,EACxDd,KAAKe,OACoB,oBAAhBf,KAAKe,QAA+C,EAArBf,KAAKe,OAAOC,OAC9ChB,KAAKe,OACL,GACNf,KAAKiB,MAAQjB,KAAKkB,qBAAqBlB,KAAKc,MAI9CjB,EAAAM,UAAAgB,WAAA,SAAWP,GACT,GAAIA,EAAQ,IAAMA,EAKhB,OAJAZ,KAAKY,MAAQQ,KAAKC,MAAMT,GACxBZ,KAAKsB,SAAWV,OAChBZ,KAAKD,gBAAgBwB,eAKvBvB,KAAKsB,SAAWV,EAChBZ,KAAKY,MAAQA,EACbZ,KAAKD,gBAAgBwB,gBAGvB1B,EAAAM,UAAAqB,MAAA,SAAMZ,GACCZ,KAAKyB,WACRzB,KAAKY,MAAQA,EACbZ,KAAKD,gBAAgBwB,eACrBvB,KAAK0B,QAAQC,KAAKf,KAItBf,EAAAM,UAAAyB,MAAA,WACE5B,KAAKY,MAAQZ,KAAKsB,SAClBtB,KAAKD,gBAAgBwB,eACrBvB,KAAK6B,QAAQF,KAAK3B,KAAKY,QAGzBf,EAAAM,UAAA2B,iBAAA,SAAiBC,GACf/B,KAAKgC,SAAWD,GAGlBlC,EAAAM,UAAA8B,kBAAA,SAAkBF,GAChB/B,KAAKkC,UAAYH,GAGnBlC,EAAAM,UAAAQ,KAAA,SAAKC,IACEZ,KAAKyB,UAAqB,GAATb,GAAcA,GAASZ,KAAKiB,MAAMD,SACtDhB,KAAKmB,WAAWP,GAChBZ,KAAKgC,SAASpB,KAIRf,EAAAM,UAAAe,qBAAV,SAA+BJ,GAE7B,IADA,IAAMqB,EAA0B,GACvBC,EAAI,EAAGA,EAAItB,EAAKsB,IACvBD,EAAOE,KAAK,CACRC,MAAOF,EACPG,MAAOvC,KAAKe,OAAOqB,IAAMA,EAAI,IAInC,OAAOD,uBA5GVK,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,SACVC,SAAA,w6BACAC,UAAW,CAACpD,GACZO,gBAAiB8C,EAAAA,wBAAwBC,oDAhBSC,EAAAA,kDAoBjDC,EAAAA,wBAEAA,EAAAA,sBAEAA,EAAAA,8BAGAA,EAAAA,uBAEAC,EAAAA,wBAEAA,EAAAA,0BAaAC,EAAAA,aAAYT,KAAA,CAAC,UAAW,CAAC,mBCnD5BU,EAAA,gCAUSA,EAAAC,QAAP,WACE,MAAO,CACLC,SAAUF,EACVP,UAAW,yBAThBU,EAAAA,SAAQb,KAAA,CAAC,CACRc,QAAS,CAACC,EAAAA,cACVC,aAAc,CAAC5D,GACf6D,QAAS,CAAC7D,SAPZ","sourcesContent":["import {\r\n  Component,\r\n  EventEmitter,\r\n  HostListener,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  forwardRef, TemplateRef, ChangeDetectionStrategy, ChangeDetectorRef\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { AccessorContent, RatingResults } from './models';\r\n\r\nexport const RATING_CONTROL_VALUE_ACCESSOR: AccessorContent = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  /* tslint:disable-next-line: no-use-before-declare */\r\n  useExisting: forwardRef(() => RatingComponent),\r\n  multi: true\r\n};\r\n\r\n@Component({\r\n  selector: 'rating',\r\n  templateUrl: './rating.component.html',\r\n  providers: [RATING_CONTROL_VALUE_ACCESSOR],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class RatingComponent implements ControlValueAccessor, OnInit {\r\n  /** number of icons */\r\n  @Input() max = 5;\r\n  /** if true will not react on any user events */\r\n  @Input() readonly: boolean;\r\n  /** array of icons titles, default: ([\"one\", \"two\", \"three\", \"four\", \"five\"]) */\r\n  @Input() titles: string[];\r\n  /** custom template for icons */\r\n  // tslint:disable-next-line:no-any\r\n  @Input() customTemplate: TemplateRef<any>;\r\n  /** fired when icon selected, $event:number equals to selected rating */\r\n  @Output() onHover: EventEmitter<number> = new EventEmitter();\r\n  /** fired when icon selected, $event:number equals to previous rating value */\r\n  @Output() onLeave: EventEmitter<number> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line:no-any\r\n  onChange: any = Function.prototype;\r\n  // tslint:disable-next-line:no-any\r\n  onTouched: any = Function.prototype;\r\n\r\n  range: RatingResults[];\r\n  value: number;\r\n  protected preValue: number;\r\n\r\n  constructor(private changeDetection: ChangeDetectorRef) {}\r\n\r\n  @HostListener('keydown', ['$event'])\r\n  onKeydown(event: KeyboardEvent): void {\r\n    /* tslint:disable-next-line: deprecation */\r\n    if ([37, 38, 39, 40].indexOf(event.which) === -1) {\r\n      return;\r\n    }\r\n\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    /* tslint:disable-next-line: deprecation */\r\n    const sign = event.which === 38 || event.which === 39 ? 1 : -1;\r\n    this.rate(this.value + sign);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.max = typeof this.max !== 'undefined' ? this.max : 5;\r\n    this.titles =\r\n      typeof this.titles !== 'undefined' && this.titles.length > 0\r\n        ? this.titles\r\n        : [];\r\n    this.range = this.buildTemplateObjects(this.max);\r\n  }\r\n\r\n  // model -> view\r\n  writeValue(value: number): void {\r\n    if (value % 1 !== value) {\r\n      this.value = Math.round(value);\r\n      this.preValue = value;\r\n      this.changeDetection.markForCheck();\r\n\r\n      return;\r\n    }\r\n\r\n    this.preValue = value;\r\n    this.value = value;\r\n    this.changeDetection.markForCheck();\r\n  }\r\n\r\n  enter(value: number): void {\r\n    if (!this.readonly) {\r\n      this.value = value;\r\n      this.changeDetection.markForCheck();\r\n      this.onHover.emit(value);\r\n    }\r\n  }\r\n\r\n  reset(): void {\r\n    this.value = this.preValue;\r\n    this.changeDetection.markForCheck();\r\n    this.onLeave.emit(this.value);\r\n  }\r\n\r\n  registerOnChange(fn: (_: number) => {}): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => {}): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  rate(value: number): void {\r\n    if (!this.readonly && value >= 0 && value <= this.range.length) {\r\n      this.writeValue(value);\r\n      this.onChange(value);\r\n    }\r\n  }\r\n\r\n  protected buildTemplateObjects(max: number): RatingResults[] {\r\n    const result: RatingResults[] = [];\r\n    for (let i = 0; i < max; i++) {\r\n      result.push({\r\n          index: i,\r\n          title: this.titles[i] || i + 1\r\n        });\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { RatingComponent } from './rating.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [RatingComponent],\r\n  exports: [RatingComponent]\r\n})\r\nexport class RatingModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: RatingModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n"]}