{"version":3,"sources":["ng://ngx-bootstrap/modal/bs-modal-ref.service.ts","ng://ngx-bootstrap/modal/modal-backdrop.options.ts","ng://ngx-bootstrap/modal/modal-options.class.ts","ng://ngx-bootstrap/modal/modal-container.component.ts","ng://ngx-bootstrap/modal/modal-backdrop.component.ts","ng://ngx-bootstrap/modal/modal.directive.ts","ng://ngx-bootstrap/modal/bs-modal.service.ts","ng://ngx-bootstrap/modal/modal.module.ts"],"names":["BsModalRef","Function","Injectable","ModalBackdropOptions","options","Object","assign","this","ModalOptions","modalConfigDefaults","backdrop","keyboard","focus","show","ignoreBackdropClick","class","animated","initialState","CLASS_NAME","SCROLLBAR_MEASURER","BACKDROP","OPEN","FADE","IN","SHOW","TRANSITION_DURATIONS","DISMISS_REASONS","ModalContainerComponent","_element","_renderer","config","prototype","ngOnInit","_this","isAnimated","addClass","nativeElement","setStyle","setTimeout","isShown","isBs3","document","body","bsModalService","getModalsCount","checkScrollbar","setScrollbar","onClick","event","target","setDismissReason","hide","onEsc","keyCode","key","preventDefault","level","ngOnDestroy","isModalHiding","removeClass","Component","args","selector","template","host","role","tabindex","[attr.aria-modal]","ElementRef","Renderer2","HostListener","ModalBackdropComponent","element","renderer","defineProperty","_isAnimated","value","_isShown","Utils","reflow","ModalDirective","_viewContainerRef","clf","EventEmitter","_backdrop","createLoader","_config","conf","getConfig","dismissReason","hideModal","dispose","toggle","onShow","emit","clearTimeout","timerHideModal","timerRmBackDrop","classList","contains","isNested","showBackdrop","showElement","onHide","window","parentNode","nodeType","Node","ELEMENT_NODE","appendChild","setAttribute","setProperty","transitionComplete","onShown","resetScrollbar","resetAdjustments","focusOtherModal","onHidden","callback","instance","callbackRemove","removeBackdrop","attach","to","_componentRef","parentElement","otherOpenedModals","querySelectorAll","length","isBodyOverflowing","clientWidth","innerWidth","scrollbarWidth","getScrollbarWidth","originalBodyPadding","parseInt","getComputedStyle","getPropertyValue","style","paddingRight","scrollDiv","createElement","offsetWidth","removeChild","Directive","exportAs","ViewContainerRef","ComponentLoaderFactory","Input","Output","BsModalService","rendererFactory","_backdropLoader","createRenderer","content","modalsCount","_createLoaders","_showBackdrop","lastDismissReason","_showModal","_hideBackdrop","_hideModal","removeLoaders","isBackdropEnabled","isBackdropInDOM","backdropRef","duration","modalLoader","loaders","bsModalRef","modalContainerRef","provide","useValue","getInnerComponent","setClass","newClass","reason","loader","copyEvent","onBeforeShow","onBeforeHide","push","splice","forEach","i","from","subscribe","RendererFactory2","ModalModule","forRoot","ngModule","providers","PositioningService","NgModule","declarations","exports","entryComponents"],"mappings":"+iBAAA,IAAAA,EAAA,kCAaqBC,uBAIoBA,oCAfxCC,EAAAA,eAFD,GCAAC,EAGE,SAAAA,EAAYC,iBAFF,EAGRC,OAAOC,OAAOC,KAAMH,ICJxBI,EAAA,oDAGCN,EAAAA,eAHD,GAuCaO,EAAoC,CAC/CC,UAAU,EACVC,UAAU,EACVC,OAAO,EACPC,MAAM,EACNC,qBAAqB,EACrBC,QAAO,GACPC,UAAU,EACVC,aAAc,IAGHC,EAAwB,CACnCC,mBAAoB,0BACpBC,SAAU,iBACVC,KAAM,aACNC,KAAM,OACNC,GAAI,KACJC,KAAM,QAUKC,EACJ,IADIA,EAED,IAGCC,EACD,iBADCA,EAEN,MCzEPC,EAAA,WAyCE,SAAAA,EAAYvB,EACUwB,EACFC,GADEtB,KAAAqB,SAAAA,EACFrB,KAAAsB,UAAAA,gBARV,sBAIc,EAKtBtB,KAAKuB,OAASzB,OAAOC,OAAO,GAAIF,UAGlCuB,EAAAI,UAAAC,SAAA,WAAA,IAAAC,EAAA1B,KACMA,KAAK2B,YACP3B,KAAKsB,UAAUM,SACb5B,KAAKqB,SAASQ,cACdlB,EAAWI,MAGff,KAAKsB,UAAUQ,SACb9B,KAAKqB,SAASQ,cACd,UACA,SAEFE,WAAW,WACTL,EAAKM,SAAU,EACfN,EAAKJ,UAAUM,SACbF,EAAKL,SAASQ,cACdI,EAAAA,QAAUtB,EAAWK,GAAKL,EAAWM,OAEtCjB,KAAK2B,WAAaT,EAAgC,GACjDgB,UAAYA,SAASC,OACsB,IAAzCnC,KAAKoC,eAAeC,mBACtBrC,KAAKoC,eAAeE,iBACpBtC,KAAKoC,eAAeG,gBAEtBvC,KAAKsB,UAAUM,SAASM,SAASC,KAAMxB,EAAWG,OAEhDd,KAAKqB,SAASQ,eAChB7B,KAAKqB,SAASQ,cAAcxB,SAKhCe,EAAAI,UAAAgB,iBAAQC,GAEJzC,KAAKuB,OAAOhB,qBACa,WAAzBP,KAAKuB,OAAOpB,UACZsC,EAAMC,SAAW1C,KAAKqB,SAASQ,gBAIjC7B,KAAKoC,eAAeO,iBAAiBxB,GACrCnB,KAAK4C,SAIPxB,EAAAI,UAAAqB,eAAMJ,GACCzC,KAAKgC,UAKY,KAAlBS,EAAMK,SAAgC,WAAdL,EAAMM,KAChCN,EAAMO,iBAINhD,KAAKuB,OAAOnB,UACZJ,KAAKiD,QAAUjD,KAAKoC,eAAeC,mBAEnCrC,KAAKoC,eAAeO,iBAAiBxB,GACrCnB,KAAK4C,UAITxB,EAAAI,UAAA0B,YAAA,WACMlD,KAAKgC,SACPhC,KAAK4C,QAITxB,EAAAI,UAAAoB,KAAA,WAAA,IAAAlB,EAAA1B,MACMA,KAAKmD,eAAkBnD,KAAKgC,UAGhChC,KAAKmD,eAAgB,EACrBnD,KAAKsB,UAAU8B,YACbpD,KAAKqB,SAASQ,cACdI,EAAAA,QAAUtB,EAAWK,GAAKL,EAAWM,MAEvCc,WAAW,WACTL,EAAKM,SAAU,EAEbE,UACAA,SAASC,MACgC,IAAzCT,EAAKU,eAAeC,kBAEpBX,EAAKJ,UAAU8B,YAAYlB,SAASC,KAAMxB,EAAWG,MAEvDY,EAAKU,eAAeQ,KAAKlB,EAAKuB,OAC9BvB,EAAKyB,eAAgB,GACpBnD,KAAK2B,WAAaT,EAA6B,yBAxHrDmC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,kBACVC,SAAU,4MAOVC,KAAM,CACJjD,QAAO,QACPkD,KAAM,SACNC,SAAU,KACVC,oBAAqB,qDAnBvB3D,SATA4D,EAAAA,kBAIAC,EAAAA,8CAwECC,EAAAA,aAAYT,KAAA,CAAC,QAAS,CAAC,0BAavBS,EAAAA,aAAYT,KAAA,CAAC,qBAAsB,CAAC,gBA3FvC,gBC4DE,SAAAU,EAAYC,EAAqBC,kBAFZ,EAGnBlE,KAAKiE,QAAUA,EACfjE,KAAKkE,SAAWA,SAjDlBpE,OAAAqE,eAAIH,EAAAxC,UAAA,aAAU,KAAd,WACE,OAAOxB,KAAKoE,iBAGd,SAAeC,GACbrE,KAAKoE,YAAcC,mCAIrBvE,OAAAqE,eAAIH,EAAAxC,UAAA,UAAO,KAAX,WACE,OAAOxB,KAAKsE,cAGd,SAAYD,IACVrE,KAAKsE,SAAWD,GAEdrE,KAAKkE,SAAStC,SACZ5B,KAAKiE,QAAQpC,cACb,GAAGlB,EAAWK,IAGhBhB,KAAKkE,SAASd,YACZpD,KAAKiE,QAAQpC,cACb,GAAGlB,EAAWK,IAGbiB,EAAAA,UACCoC,EACFrE,KAAKkE,SAAStC,SACZ5B,KAAKiE,QAAQpC,cACb,GAAGlB,EAAWM,MAGhBjB,KAAKkE,SAASd,YACZpD,KAAKiE,QAAQpC,cACb,GAAGlB,EAAWM,wCAiBtB+C,EAAAxC,UAAAC,SAAA,WACMzB,KAAK2B,aACP3B,KAAKkE,SAAStC,SACZ5B,KAAKiE,QAAQpC,cACb,GAAGlB,EAAWI,MAEhBwD,EAAAA,MAAMC,OAAOxE,KAAKiE,QAAQpC,gBAE5B7B,KAAKgC,SAAU,uBAlElBqB,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,oBACVC,SAAU,IACVC,KAAM,CAAEjD,QAAOG,EAAWE,uDAVRgD,EAAAA,kBAAoBC,EAAAA,+BCiFtC,SAAAW,EAAoBpD,EACRqD,EACQpD,EACRqD,GAHQ3E,KAAAqB,SAAAA,EAEArB,KAAAsB,UAAAA,cA7CmB,IAAIsD,EAAAA,0BAKH,IAAIA,EAAAA,yBAKL,IAAIA,EAAAA,2BAKF,IAAIA,EAAAA,4BAaxB,0BAES,2BACE,sBACL,sBAEA,uBACC,iBAMT,EAMjB5E,KAAK6E,UAAYF,EAAIG,aACnBzD,EACAqD,EACApD,gCA5DAmD,EAAAjD,UAAA,SAAM,KAIV,WACE,OAAOxB,KAAK+E,sBALHC,GACThF,KAAK+E,QAAU/E,KAAKiF,UAAUD,oCAgChClF,OAAAqE,eAAIM,EAAAjD,UAAA,UAAO,KAAX,WACE,OAAOxB,KAAKsE,0CA+BdG,EAAAjD,UAAAgB,iBAAQC,GAEJzC,KAAKuB,OAAOhB,qBACa,WAAzBP,KAAKuB,OAAOpB,UACZsC,EAAMC,SAAW1C,KAAKqB,SAASQ,gBAIjC7B,KAAKkF,cAAgB/D,EACrBnB,KAAK4C,KAAKH,KAKZgC,EAAAjD,UAAAqB,eAAMJ,GACCzC,KAAKsE,WAIY,KAAlB7B,EAAMK,SAAgC,WAAdL,EAAMM,KAChCN,EAAMO,iBAGJhD,KAAKuB,OAAOnB,WACdJ,KAAKkF,cAAgB/D,EACrBnB,KAAK4C,UAIT6B,EAAAjD,UAAA0B,YAAA,WACElD,KAAKuB,YAAS,EACVvB,KAAKsE,WACPtE,KAAKsE,UAAW,EAChBtE,KAAKmF,YACLnF,KAAK6E,UAAUO,YAInBX,EAAAjD,UAAAC,SAAA,WAAA,IAAAC,EAAA1B,KACEA,KAAK+E,QAAU/E,KAAK+E,SAAW/E,KAAKiF,YACpClD,WAAW,WACLL,EAAKqD,QAAQzE,MACfoB,EAAKpB,QAEN,IAMLmE,EAAAjD,UAAA6D,OAAA,WACE,OAAOrF,KAAKsE,SAAWtE,KAAK4C,OAAS5C,KAAKM,QAI5CmE,EAAAjD,UAAAlB,KAAA,WAAA,IAAAoB,EAAA1B,KACEA,KAAKkF,cAAgB,KACrBlF,KAAKsF,OAAOC,KAAKvF,MACbA,KAAKsE,WAGTkB,aAAaxF,KAAKyF,gBAClBD,aAAaxF,KAAK0F,iBAElB1F,KAAKsE,UAAW,EAEhBtE,KAAKsC,iBACLtC,KAAKuC,eAEDL,EAAAA,UAAYA,EAAAA,SAASC,OACnBD,EAAAA,SAASC,KAAKwD,UAAUC,SAASjF,EAAWG,MAC9Cd,KAAK6F,UAAW,EAEhB7F,KAAKsB,UAAUM,SAASM,EAAAA,SAASC,KAAMxB,EAAWG,OAItDd,KAAK8F,aAAa,WAChBpE,EAAKqE,kBAKTtB,EAAAjD,UAAAoB,KAAA,SAAKH,GAAL,IAAAf,EAAA1B,KACMyC,GACFA,EAAMO,iBAGRhD,KAAKgG,OAAOT,KAAKvF,MAGZA,KAAKsE,WAIV2B,EAAAA,OAAOT,aAAaxF,KAAKyF,gBACzBQ,EAAAA,OAAOT,aAAaxF,KAAK0F,iBAEzB1F,KAAKsE,UAAW,EAChBtE,KAAKsB,UAAU8B,YAAYpD,KAAKqB,SAASQ,cAAelB,EAAWK,IAC9DiB,EAAAA,SACHjC,KAAKsB,UAAU8B,YAAYpD,KAAKqB,SAASQ,cAAelB,EAAWM,MAIjEjB,KAAK+E,QAAQtE,SACfT,KAAKyF,eAAiBQ,EAAAA,OAAOlE,WAC3B,WAAM,OAAAL,EAAKyD,aAvLS,KA2LtBnF,KAAKmF,cAKCV,EAAAjD,UAAAyD,UAAV,SAAoB1D,GAClB,OAAOzB,OAAOC,OAAO,GAAIG,EAAqBqB,IAOtCkD,EAAAjD,UAAAuE,YAAV,WAAA,IAAArE,EAAA1B,KAGKA,KAAKqB,SAASQ,cAAcqE,YAC7BlG,KAAKqB,SAASQ,cAAcqE,WAAWC,WAAaC,KAAKC,cAGrDnE,EAAAA,UAAYA,EAAAA,SAASC,MACvBD,EAAAA,SAASC,KAAKmE,YAAYtG,KAAKqB,SAASQ,eAI5C7B,KAAKsB,UAAUiF,aACbvG,KAAKqB,SAASQ,cACd,cACA,SAEF7B,KAAKsB,UAAUiF,aACbvG,KAAKqB,SAASQ,cACd,aACA,QAEF7B,KAAKsB,UAAUQ,SACb9B,KAAKqB,SAASQ,cACd,UACA,SAEF7B,KAAKsB,UAAUkF,YACbxG,KAAKqB,SAASQ,cACd,YACA,GAGE7B,KAAK+E,QAAQtE,UACf8D,EAAAA,MAAMC,OAAOxE,KAAKqB,SAASQ,eAI7B7B,KAAKsB,UAAUM,SAAS5B,KAAKqB,SAASQ,cAAelB,EAAWK,IAC3DiB,EAAAA,SACHjC,KAAKsB,UAAUM,SAAS5B,KAAKqB,SAASQ,cAAelB,EAAWM,MAGlE,IAAMwF,EAAqB,WACrB/E,EAAKqD,QAAQ1E,OACfqB,EAAKL,SAASQ,cAAcxB,QAE9BqB,EAAKgF,QAAQnB,KAAK7D,IAGhB1B,KAAK+E,QAAQtE,SACfsB,WAAW0E,EA3PW,KA6PtBA,KAKMhC,EAAAjD,UAAA2D,UAAV,WAAA,IAAAzD,EAAA1B,KACEA,KAAKsB,UAAUiF,aACbvG,KAAKqB,SAASQ,cACd,cACA,QAEF7B,KAAKsB,UAAUQ,SACb9B,KAAKqB,SAASQ,cACd,UACA,QAEF7B,KAAK8F,aAAa,WACXpE,EAAKmE,WACJ3D,EAAAA,UAAYA,EAAAA,SAASC,MACvBT,EAAKJ,UAAU8B,YAAYlB,EAAAA,SAASC,KAAMxB,EAAWG,MAEvDY,EAAKiF,kBAEPjF,EAAKkF,mBACLlF,EAAKmF,kBACLnF,EAAKoF,SAASvB,KAAK7D,MAOb+C,EAAAjD,UAAAsE,aAAV,SAAuBiB,GAAvB,IAAArF,EAAA1B,KACE,IACEA,KAAKsE,WACLtE,KAAKuB,OAAOpB,UACVH,KAAKG,UAAaH,KAAKG,SAAS6G,SAAShF,QAoBtC,IAAKhC,KAAKsE,UAAYtE,KAAKG,SAAU,CAC1CH,KAAKG,SAAS6G,SAAShF,SAAU,EAEjC,IAAMiF,EAAiB,WACrBvF,EAAKwF,iBACDH,GACFA,KAIA/G,KAAKG,SAAS6G,SAASrF,WACzB3B,KAAK0F,gBAAkBO,EAAAA,OAAOlE,WAC5BkF,EAhU2B,KAoU7BA,SAEOF,GACTA,QAtCA,CAQA,GAPA/G,KAAKkH,iBACLlH,KAAK6E,UACFsC,OAAOnD,GACPoD,GAAG,QACH9G,KAAK,CAACqB,WAAY3B,KAAK+E,QAAQtE,WAClCT,KAAKG,SAAWH,KAAK6E,UAAUwC,eAE1BN,EACH,OAGF,IAAK/G,KAAK+E,QAAQtE,SAGhB,YAFAsG,IAKFhF,WAAWgF,EAnToB,OA4UzBtC,EAAAjD,UAAA0F,eAAV,WACElH,KAAK6E,UAAUjC,QA4BP6B,EAAAjD,UAAAqF,gBAAV,WACE,GAAiD,MAA7C7G,KAAKqB,SAASQ,cAAcyF,cAAhC,CAGA,IAAMC,EAAoBvH,KAAKqB,SAASQ,cAAcyF,cAAcE,iBAAiB,gBAChFD,EAAkBE,QAGvBF,EAAkBA,EAAkBE,OAAS,GAAGpH,UAIxCoE,EAAAjD,UAAAoF,iBAAV,WACE5G,KAAKsB,UAAUQ,SACb9B,KAAKqB,SAASQ,cACd,cACA,IAEF7B,KAAKsB,UAAUQ,SACb9B,KAAKqB,SAASQ,cACd,eACA,KAMM4C,EAAAjD,UAAAc,eAAV,WACEtC,KAAK0H,kBAAoBxF,EAAAA,SAASC,KAAKwF,YAAc1B,EAAAA,OAAO2B,WAC5D5H,KAAK6H,eAAiB7H,KAAK8H,qBAGnBrD,EAAAjD,UAAAe,aAAV,WACOL,EAAAA,WAILlC,KAAK+H,oBAAsBC,SACzB/B,EAAAA,OACGgC,iBAAiB/F,EAAAA,SAASC,MAC1B+F,iBAAiB,kBAAoB,EACxC,IAGElI,KAAK0H,oBACPxF,EAAAA,SAASC,KAAKgG,MAAMC,aAAkBpI,KAAK+H,oBAC3C/H,KAAK6H,eAAc,QAIbpD,EAAAjD,UAAAmF,eAAV,WACEzE,EAAAA,SAASC,KAAKgG,MAAMC,aAAkBpI,KAAK+H,oBAAmB,MAItDtD,EAAAjD,UAAAsG,kBAAV,WACE,IAAMO,EAAYrI,KAAKsB,UAAUgH,cAAc,OAC/CtI,KAAKsB,UAAUM,SAASyG,EAAW1H,EAAWC,oBAC9CZ,KAAKsB,UAAUgF,YAAYpE,EAAAA,SAASC,KAAMkG,GAC1C,IAAMR,EAAiBQ,EAAUE,YAAcF,EAAUV,YAGzD,OAFA3H,KAAKsB,UAAUkH,YAAYtG,EAAAA,SAASC,KAAMkG,GAEnCR,uBApaVY,EAAAA,UAASnF,KAAA,CAAC,CACTC,SAAU,YACVmF,SAAU,wDAjBe7E,EAAAA,kBACa8E,EAAAA,wBAAX7E,EAAAA,iBAQH8E,EAAAA,0DAYvBC,EAAAA,sBAUAC,EAAAA,wBAKAA,EAAAA,uBAKAA,EAAAA,yBAKAA,EAAAA,wBAwCA/E,EAAAA,aAAYT,KAAA,CAAC,QAAS,CAAC,0BAcvBS,EAAAA,aAAYT,KAAA,CAAC,cAAe,CAAC,mBC1GhCyF,EAAA,WAgDE,SAAAA,EAAYC,EAA2CrE,GAAA3E,KAAA2E,IAAAA,cAzBhCzE,cAGK,IAAI0E,EAAAA,0BAEH,IAAIA,EAAAA,yBAEL,IAAIA,EAAAA,2BAEF,IAAIA,EAAAA,qCAEJ,2BACE,sBAEL,mBAIL,yBACM,gBAEkC,GAK5D5E,KAAKiJ,gBAAkBjJ,KAAK2E,IAAIG,aAC9B,KACA,KACA,MAEF9E,KAAKsB,UAAY0H,EAAgBE,eAAe,KAAM,aAKxDH,EAAAvH,UAAAlB,KAAA,SAAK6I,EAA0C5H,GAO7C,OANAvB,KAAKoJ,cACLpJ,KAAKqJ,iBACLrJ,KAAKuB,OAASzB,OAAOC,OAAO,GAAIG,EAAqBqB,GACrDvB,KAAKsJ,gBACLtJ,KAAKuJ,kBAAoB,KAElBvJ,KAAKwJ,WAAWL,IAGzBJ,EAAAvH,UAAAoB,KAAA,SAAKK,GAAL,IAAAvB,EAAA1B,KAC2B,IAArBA,KAAKoJ,cACPpJ,KAAKyJ,gBACLzJ,KAAK2G,kBAEP3G,KAAKoJ,YAAkC,GAApBpJ,KAAKoJ,YAAmBpJ,KAAKoJ,YAAc,EAAI,EAClErH,WAAW,WACTL,EAAKgI,WAAWzG,GAChBvB,EAAKiI,cAAc1G,IAClBjD,KAAKuB,OAAOd,SAAWS,EAAgC,IAG5D6H,EAAAvH,UAAA8H,cAAA,WACE,IAAMM,EACJ5J,KAAKuB,OAAOpB,UAAqC,WAAzBH,KAAKuB,OAAOpB,SAChC0J,GACH7J,KAAK8J,cAAgB9J,KAAK8J,YAAY9C,SAAShF,QAEzB,IAArBhC,KAAKoJ,cACPpJ,KAAKkH,iBAED0C,GAAqBC,IACvB7J,KAAKiJ,gBACF9B,OAAOnD,GACPoD,GAAG,QACH9G,KAAK,CAAEqB,WAAY3B,KAAKuB,OAAOd,WAClCT,KAAK8J,YAAc9J,KAAKiJ,gBAAgB5B,iBAK9C0B,EAAAvH,UAAAiI,cAAA,WAAA,IAAA/H,EAAA1B,KACE,GAAKA,KAAK8J,YAAV,CAGA9J,KAAK8J,YAAY9C,SAAShF,SAAU,EACpC,IAAM+H,EAAW/J,KAAKuB,OAAOd,SAAWS,EAAgC,EACxEa,WAAW,WAAM,OAAAL,EAAKwF,kBAAkB6C,KAG1ChB,EAAAvH,UAAAgI,WAAA,SAAWL,GACT,IAAMa,EAAchK,KAAKiK,QAAQjK,KAAKiK,QAAQxC,OAAS,GACjDyC,EAAa,IAAIzK,EACjB0K,EAAoBH,EACvBI,QAAQ,CAAEA,QAASnK,EAAcoK,SAAUrK,KAAKuB,SAChD6I,QAAQ,CAAEA,QAAS3K,EAAY4K,SAAUH,IACzC/C,OAAO/F,GACPgG,GAAG,QACH9G,KAAK,CAAC6I,QAAOA,EAAExH,WAAY3B,KAAKuB,OAAOd,SAAUC,aAAcV,KAAKuB,OAAOb,aAAc0B,eAAgBpC,OAU5G,OATAmK,EAAkBnD,SAAS/D,MAAQjD,KAAKqC,iBACxC6H,EAAWtH,KAAO,WAChBuH,EAAkBnD,SAASpE,QAE7BsH,EAAWf,QAAUa,EAAYM,qBAAuB,KACxDJ,EAAWK,SAAW,SAACC,GACrBL,EAAkBnD,SAASzF,OAAOf,SAAQgK,GAGrCN,GAGTnB,EAAAvH,UAAAkI,WAAA,SAAWzG,GACT,IAAM+G,EAAchK,KAAKiK,QAAQhH,EAAQ,GACrC+G,GACFA,EAAYpH,QAIhBmG,EAAAvH,UAAAa,eAAA,WACE,OAAOrC,KAAKoJ,aAGdL,EAAAvH,UAAAmB,iBAAA,SAAiB8H,GACfzK,KAAKuJ,kBAAoBkB,GAG3B1B,EAAAvH,UAAA0F,eAAA,WACElH,KAAKiJ,gBAAgBrG,OACrB5C,KAAK8J,YAAc,MAMrBf,EAAAvH,UAAAc,eAAA,WACEtC,KAAK0H,kBAAoBxF,SAASC,KAAKwF,YAAc1B,OAAO2B,WAC5D5H,KAAK6H,eAAiB7H,KAAK8H,qBAG7BiB,EAAAvH,UAAAe,aAAA,WACOL,WAILlC,KAAK+H,oBAAsBC,SACzB/B,OACGgC,iBAAiB/F,SAASC,MAC1B+F,iBAAiB,kBAAoB,IACxC,IAGElI,KAAK0H,oBACPxF,SAASC,KAAKgG,MAAMC,aAAkBpI,KAAK+H,oBACzC/H,KAAK6H,eAAc,QAIjBkB,EAAAvH,UAAAmF,0BACNzE,SAASC,KAAKgG,MAAMC,aAAkBpI,KAAK+H,oBAAmB,MAIxDgB,EAAAvH,UAAAsG,6BACN,IAAMO,EAAYrI,KAAKsB,UAAUgH,cAAc,OAC/CtI,KAAKsB,UAAUM,SAASyG,EAAW1H,EAAWC,oBAC9CZ,KAAKsB,UAAUgF,YAAYpE,SAASC,KAAMkG,GAC1C,IAAMR,EAAiBQ,EAAUE,YAAcF,EAAUV,YAGzD,OAFA3H,KAAKsB,UAAUkH,YAAYtG,SAASC,KAAMkG,GAEnCR,GAGDkB,EAAAvH,UAAA6H,0BACN,IAAMqB,EAAS1K,KAAK2E,IAAIG,aACtB,KACA,KACA,MAEF9E,KAAK2K,UAAUD,EAAOE,aAAc5K,KAAKsF,QACzCtF,KAAK2K,UAAUD,EAAOhE,QAAS1G,KAAK0G,SACpC1G,KAAK2K,UAAUD,EAAOG,aAAc7K,KAAKgG,QACzChG,KAAK2K,UAAUD,EAAO5D,SAAU9G,KAAK8G,UACrC9G,KAAKiK,QAAQa,KAAKJ,IAGZ3B,EAAAvH,UAAAmI,uBAAc1G,GACpBjD,KAAKiK,QAAQc,OAAO9H,EAAQ,EAAG,GAC/BjD,KAAKiK,QAAQe,QACX,SAACN,EAAkDO,GACjDP,EAAO1D,SAAS/D,MAAQgI,EAAI,KAM1BlC,EAAAvH,UAAAmJ,mBAAUO,EAAyB9D,cACzC8D,EAAKC,UAAU,WACb/D,EAAG7B,KAAK7D,EAAK6H,0CApMlB5J,EAAAA,sDAdCyL,EAAAA,wBAGwBxC,EAAAA,4BAT1B,GCAAyC,EAAA,gCAmBSA,EAAAC,QAAP,WACE,MAAO,CACLC,SAAUF,EACVG,UAAW,CAACzC,EAAgBH,EAAAA,uBAAwB6C,EAAAA,0CAbzDC,EAAAA,SAAQpI,KAAA,CAAC,CACRqI,aAAc,CACZ3H,EACAS,EACArD,GAEFwK,QAAS,CAAC5H,EAAwBS,GAClCoH,gBAAiB,CAAC7H,EAAwB5C,SAhB5C","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class BsModalRef {\r\n  /**\r\n   * Reference to a component inside the modal. Null if modal's been created with TemplateRef\r\n   */\r\n  // tslint:disable-next-line:no-any\r\n  content?: any | null;\r\n\r\n  /**\r\n   * Hides the modal\r\n   */\r\n  hide: () => void = Function;\r\n  /**\r\n   * Sets new class to modal window\r\n   */\r\n  setClass: (newClass: string) => void = Function;\r\n}\r\n","export class ModalBackdropOptions {\r\n  animate = true;\r\n\r\n  constructor(options: ModalBackdropOptions) {\r\n    Object.assign(this, options);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ClassName, DismissReasons, Selector, TransitionDurations } from './models';\r\n\r\n@Injectable()\r\nexport class ModalOptions {\r\n  /**\r\n   *  Includes a modal-backdrop element. Alternatively,\r\n   *  specify static for a backdrop which doesn't close the modal on click.\r\n   */\r\n  backdrop?: boolean | 'static';\r\n  /**\r\n   * Closes the modal when escape key is pressed.\r\n   */\r\n  keyboard?: boolean;\r\n\r\n  focus?: boolean;\r\n  /**\r\n   * Shows the modal when initialized.\r\n   */\r\n  show?: boolean;\r\n  /**\r\n   * Ignore the backdrop click\r\n   */\r\n  ignoreBackdropClick?: boolean;\r\n  /**\r\n   * Css class for opened modal\r\n   */\r\n  class?: string;\r\n  /**\r\n   * Toggle animation\r\n   */\r\n  animated?: boolean;\r\n  /**\r\n   * Modal data\r\n   */\r\n  initialState?: Object;\r\n}\r\n\r\n\r\nexport const modalConfigDefaults: ModalOptions = {\r\n  backdrop: true,\r\n  keyboard: true,\r\n  focus: true,\r\n  show: false,\r\n  ignoreBackdropClick: false,\r\n  class: '',\r\n  animated: true,\r\n  initialState: {}\r\n};\r\n\r\nexport const CLASS_NAME: ClassName = {\r\n  SCROLLBAR_MEASURER: 'modal-scrollbar-measure',\r\n  BACKDROP: 'modal-backdrop',\r\n  OPEN: 'modal-open',\r\n  FADE: 'fade',\r\n  IN: 'in', // bs3\r\n  SHOW: 'show' // bs4\r\n};\r\n\r\nexport const SELECTOR: Selector = {\r\n  DIALOG: '.modal-dialog',\r\n  DATA_TOGGLE: '[data-toggle=\"modal\"]',\r\n  DATA_DISMISS: '[data-dismiss=\"modal\"]',\r\n  FIXED_CONTENT: '.navbar-fixed-top, .navbar-fixed-bottom, .is-fixed'\r\n};\r\n\r\nexport const TRANSITION_DURATIONS: TransitionDurations = {\r\n  MODAL: 300,\r\n  BACKDROP: 150\r\n};\r\n\r\nexport const DISMISS_REASONS: DismissReasons = {\r\n  BACKRDOP: 'backdrop-click',\r\n  ESC: 'esc'\r\n};\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  HostListener,\r\n  OnDestroy,\r\n  OnInit,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport {\r\n  CLASS_NAME,\r\n  DISMISS_REASONS,\r\n  ModalOptions,\r\n  TRANSITION_DURATIONS\r\n} from './modal-options.class';\r\nimport { BsModalService } from './bs-modal.service';\r\nimport { isBs3 } from 'ngx-bootstrap/utils';\r\n\r\n@Component({\r\n  selector: 'modal-container',\r\n  template: `\r\n    <div [class]=\"'modal-dialog' + (config.class ? ' ' + config.class : '')\" role=\"document\">\r\n      <div class=\"modal-content\">\r\n        <ng-content></ng-content>\r\n      </div>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'modal',\r\n    role: 'dialog',\r\n    tabindex: '-1',\r\n    '[attr.aria-modal]': 'true'\r\n  }\r\n})\r\nexport class ModalContainerComponent implements OnInit, OnDestroy {\r\n  config: ModalOptions;\r\n  isShown = false;\r\n  level: number;\r\n  isAnimated: boolean;\r\n  bsModalService: BsModalService;\r\n  private isModalHiding = false;\r\n\r\n  constructor(options: ModalOptions,\r\n              protected _element: ElementRef,\r\n              private _renderer: Renderer2) {\r\n    this.config = Object.assign({}, options);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.isAnimated) {\r\n      this._renderer.addClass(\r\n        this._element.nativeElement,\r\n        CLASS_NAME.FADE\r\n      );\r\n    }\r\n    this._renderer.setStyle(\r\n      this._element.nativeElement,\r\n      'display',\r\n      'block'\r\n    );\r\n    setTimeout(() => {\r\n      this.isShown = true;\r\n      this._renderer.addClass(\r\n        this._element.nativeElement,\r\n        isBs3() ? CLASS_NAME.IN : CLASS_NAME.SHOW\r\n      );\r\n    }, this.isAnimated ? TRANSITION_DURATIONS.BACKDROP : 0);\r\n    if (document && document.body) {\r\n      if (this.bsModalService.getModalsCount() === 1) {\r\n        this.bsModalService.checkScrollbar();\r\n        this.bsModalService.setScrollbar();\r\n      }\r\n      this._renderer.addClass(document.body, CLASS_NAME.OPEN);\r\n    }\r\n    if (this._element.nativeElement) {\r\n      this._element.nativeElement.focus();\r\n    }\r\n  }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    if (\r\n      this.config.ignoreBackdropClick ||\r\n      this.config.backdrop === 'static' ||\r\n      event.target !== this._element.nativeElement\r\n    ) {\r\n      return;\r\n    }\r\n    this.bsModalService.setDismissReason(DISMISS_REASONS.BACKRDOP);\r\n    this.hide();\r\n  }\r\n\r\n  @HostListener('window:keydown.esc', ['$event'])\r\n  onEsc(event: KeyboardEvent): void {\r\n    if (!this.isShown) {\r\n      return;\r\n    }\r\n\r\n    // tslint:disable-next-line:deprecation\r\n    if (event.keyCode === 27 || event.key === 'Escape') {\r\n      event.preventDefault();\r\n    }\r\n\r\n    if (\r\n      this.config.keyboard &&\r\n      this.level === this.bsModalService.getModalsCount()\r\n    ) {\r\n      this.bsModalService.setDismissReason(DISMISS_REASONS.ESC);\r\n      this.hide();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.isShown) {\r\n      this.hide();\r\n    }\r\n  }\r\n\r\n  hide(): void {\r\n    if (this.isModalHiding || !this.isShown) {\r\n      return;\r\n    }\r\n    this.isModalHiding = true;\r\n    this._renderer.removeClass(\r\n      this._element.nativeElement,\r\n      isBs3() ? CLASS_NAME.IN : CLASS_NAME.SHOW\r\n    );\r\n    setTimeout(() => {\r\n      this.isShown = false;\r\n      if (\r\n        document &&\r\n        document.body &&\r\n        this.bsModalService.getModalsCount() === 1\r\n      ) {\r\n        this._renderer.removeClass(document.body, CLASS_NAME.OPEN);\r\n      }\r\n      this.bsModalService.hide(this.level);\r\n      this.isModalHiding = false;\r\n    }, this.isAnimated ? TRANSITION_DURATIONS.MODAL : 0);\r\n  }\r\n}\r\n","import { Component, ElementRef, OnInit, Renderer2 } from '@angular/core';\r\n\r\nimport { CLASS_NAME } from './modal-options.class';\r\nimport { isBs3, Utils } from 'ngx-bootstrap/utils';\r\n\r\n\r\n/** This component will be added as background layout for modals if enabled */\r\n@Component({\r\n  selector: 'bs-modal-backdrop',\r\n  template: ' ',\r\n  host: { class: CLASS_NAME.BACKDROP }\r\n})\r\nexport class ModalBackdropComponent implements OnInit {\r\n  get isAnimated(): boolean {\r\n    return this._isAnimated;\r\n  }\r\n\r\n  set isAnimated(value: boolean) {\r\n    this._isAnimated = value;\r\n    // this.renderer.setElementClass(this.element.nativeElement, `${ClassName.FADE}`, value);\r\n  }\r\n\r\n  get isShown(): boolean {\r\n    return this._isShown;\r\n  }\r\n\r\n  set isShown(value: boolean) {\r\n    this._isShown = value;\r\n    if (value) {\r\n      this.renderer.addClass(\r\n        this.element.nativeElement,\r\n        `${CLASS_NAME.IN}`\r\n      );\r\n    } else {\r\n      this.renderer.removeClass(\r\n        this.element.nativeElement,\r\n        `${CLASS_NAME.IN}`\r\n      );\r\n    }\r\n    if (!isBs3()) {\r\n      if (value) {\r\n        this.renderer.addClass(\r\n          this.element.nativeElement,\r\n          `${CLASS_NAME.SHOW}`\r\n        );\r\n      } else {\r\n        this.renderer.removeClass(\r\n          this.element.nativeElement,\r\n          `${CLASS_NAME.SHOW}`\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  element: ElementRef;\r\n  renderer: Renderer2;\r\n\r\n  protected _isAnimated: boolean;\r\n  protected _isShown = false;\r\n\r\n  constructor(element: ElementRef, renderer: Renderer2) {\r\n    this.element = element;\r\n    this.renderer = renderer;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.isAnimated) {\r\n      this.renderer.addClass(\r\n        this.element.nativeElement,\r\n        `${CLASS_NAME.FADE}`\r\n      );\r\n      Utils.reflow(this.element.nativeElement);\r\n    }\r\n    this.isShown = true;\r\n  }\r\n}\r\n","/* tslint:disable:max-file-line-count */\r\n// todo: should we support enforce focus in?\r\n// todo: in original bs there are was a way to prevent modal from showing\r\n// todo: original modal had resize events\r\n\r\nimport {\r\n  ComponentRef, Directive, ElementRef, EventEmitter, HostListener, Input,\r\n  OnDestroy, OnInit, Output, Renderer2, ViewContainerRef\r\n} from '@angular/core';\r\n\r\nimport { document, window, isBs3, Utils } from 'ngx-bootstrap/utils';\r\nimport { ModalBackdropComponent } from './modal-backdrop.component';\r\nimport {\r\n  CLASS_NAME, DISMISS_REASONS, modalConfigDefaults, ModalOptions\r\n} from './modal-options.class';\r\nimport { ComponentLoader, ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\r\n\r\nconst TRANSITION_DURATION = 300;\r\nconst BACKDROP_TRANSITION_DURATION = 150;\r\n\r\n/** Mark any code with directive to show it's content in modal */\r\n@Directive({\r\n  selector: '[bsModal]',\r\n  exportAs: 'bs-modal'\r\n})\r\nexport class ModalDirective implements OnDestroy, OnInit {\r\n  /** allows to set modal configuration via element property */\r\n  @Input()\r\n  set config(conf: ModalOptions) {\r\n    this._config = this.getConfig(conf);\r\n  }\r\n\r\n  get config(): ModalOptions {\r\n    return this._config;\r\n  }\r\n\r\n  /** This event fires immediately when the `show` instance method is called. */\r\n  @Output()\r\n  onShow: EventEmitter<ModalDirective> = new EventEmitter<ModalDirective>();\r\n  /** This event is fired when the modal has been made visible to the user\r\n   * (will wait for CSS transitions to complete)\r\n   */\r\n  @Output()\r\n  onShown: EventEmitter<ModalDirective> = new EventEmitter<ModalDirective>();\r\n  /** This event is fired immediately when\r\n   * the hide instance method has been called.\r\n   */\r\n  @Output()\r\n  onHide: EventEmitter<ModalDirective> = new EventEmitter<ModalDirective>();\r\n  /** This event is fired when the modal has finished being\r\n   * hidden from the user (will wait for CSS transitions to complete).\r\n   */\r\n  @Output()\r\n  onHidden: EventEmitter<ModalDirective> = new EventEmitter<ModalDirective>();\r\n\r\n  /** This field contains last dismiss reason.\r\n   * Possible values: `backdrop-click`, `esc` and `null`\r\n   * (if modal was closed by direct call of `.hide()`).\r\n   */\r\n  dismissReason: string;\r\n\r\n  get isShown(): boolean {\r\n    return this._isShown;\r\n  }\r\n\r\n  protected _config: ModalOptions;\r\n  protected _isShown = false;\r\n\r\n  protected isBodyOverflowing = false;\r\n  protected originalBodyPadding = 0;\r\n  protected scrollbarWidth = 0;\r\n\r\n  protected timerHideModal = 0;\r\n  protected timerRmBackDrop = 0;\r\n\r\n  // reference to backdrop component\r\n  protected backdrop: ComponentRef<ModalBackdropComponent>;\r\n  private _backdrop: ComponentLoader<ModalBackdropComponent>;\r\n\r\n  private isNested = false;\r\n\r\n  constructor(private _element: ElementRef,\r\n              _viewContainerRef: ViewContainerRef,\r\n              private _renderer: Renderer2,\r\n              clf: ComponentLoaderFactory) {\r\n    this._backdrop = clf.createLoader<ModalBackdropComponent>(\r\n      _element,\r\n      _viewContainerRef,\r\n      _renderer\r\n    );\r\n  }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    if (\r\n      this.config.ignoreBackdropClick ||\r\n      this.config.backdrop === 'static' ||\r\n      event.target !== this._element.nativeElement\r\n    ) {\r\n      return;\r\n    }\r\n    this.dismissReason = DISMISS_REASONS.BACKRDOP;\r\n    this.hide(event);\r\n  }\r\n\r\n  // todo: consider preventing default and stopping propagation\r\n  @HostListener('keydown.esc', ['$event'])\r\n  onEsc(event: KeyboardEvent): void {\r\n    if (!this._isShown) {\r\n      return;\r\n    }\r\n    // tslint:disable-next-line:deprecation\r\n    if (event.keyCode === 27 || event.key === 'Escape') {\r\n      event.preventDefault();\r\n    }\r\n\r\n    if (this.config.keyboard) {\r\n      this.dismissReason = DISMISS_REASONS.ESC;\r\n      this.hide();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.config = void 0;\r\n    if (this._isShown) {\r\n      this._isShown = false;\r\n      this.hideModal();\r\n      this._backdrop.dispose();\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this._config = this._config || this.getConfig();\r\n    setTimeout(() => {\r\n      if (this._config.show) {\r\n        this.show();\r\n      }\r\n    }, 0);\r\n  }\r\n\r\n  /* Public methods */\r\n\r\n  /** Allows to manually toggle modal visibility */\r\n  toggle(): void {\r\n    return this._isShown ? this.hide() : this.show();\r\n  }\r\n\r\n  /** Allows to manually open modal */\r\n  show(): void {\r\n    this.dismissReason = null;\r\n    this.onShow.emit(this);\r\n    if (this._isShown) {\r\n      return;\r\n    }\r\n    clearTimeout(this.timerHideModal);\r\n    clearTimeout(this.timerRmBackDrop);\r\n\r\n    this._isShown = true;\r\n\r\n    this.checkScrollbar();\r\n    this.setScrollbar();\r\n\r\n    if (document && document.body) {\r\n      if (document.body.classList.contains(CLASS_NAME.OPEN)) {\r\n        this.isNested = true;\r\n      } else {\r\n        this._renderer.addClass(document.body, CLASS_NAME.OPEN);\r\n      }\r\n    }\r\n\r\n    this.showBackdrop(() => {\r\n      this.showElement();\r\n    });\r\n  }\r\n\r\n  /** Allows to manually close modal */\r\n  hide(event?: Event): void {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    this.onHide.emit(this);\r\n\r\n    // todo: add an option to prevent hiding\r\n    if (!this._isShown) {\r\n      return;\r\n    }\r\n\r\n    window.clearTimeout(this.timerHideModal);\r\n    window.clearTimeout(this.timerRmBackDrop);\r\n\r\n    this._isShown = false;\r\n    this._renderer.removeClass(this._element.nativeElement, CLASS_NAME.IN);\r\n    if (!isBs3()) {\r\n      this._renderer.removeClass(this._element.nativeElement, CLASS_NAME.SHOW);\r\n    }\r\n    // this._addClassIn = false;\r\n\r\n    if (this._config.animated) {\r\n      this.timerHideModal = window.setTimeout(\r\n        () => this.hideModal(),\r\n        TRANSITION_DURATION\r\n      );\r\n    } else {\r\n      this.hideModal();\r\n    }\r\n  }\r\n\r\n  /** Private methods @internal */\r\n  protected getConfig(config?: ModalOptions): ModalOptions {\r\n    return Object.assign({}, modalConfigDefaults, config);\r\n  }\r\n\r\n  /**\r\n   *  Show dialog\r\n   *  @internal\r\n   */\r\n  protected showElement(): void {\r\n    // todo: replace this with component loader usage\r\n    if (\r\n      !this._element.nativeElement.parentNode ||\r\n      this._element.nativeElement.parentNode.nodeType !== Node.ELEMENT_NODE\r\n    ) {\r\n      // don't move modals dom position\r\n      if (document && document.body) {\r\n        document.body.appendChild(this._element.nativeElement);\r\n      }\r\n    }\r\n\r\n    this._renderer.setAttribute(\r\n      this._element.nativeElement,\r\n      'aria-hidden',\r\n      'false'\r\n    );\r\n    this._renderer.setAttribute(\r\n      this._element.nativeElement,\r\n      'aria-modal',\r\n      'true'\r\n    );\r\n    this._renderer.setStyle(\r\n      this._element.nativeElement,\r\n      'display',\r\n      'block'\r\n    );\r\n    this._renderer.setProperty(\r\n      this._element.nativeElement,\r\n      'scrollTop',\r\n      0\r\n    );\r\n\r\n    if (this._config.animated) {\r\n      Utils.reflow(this._element.nativeElement);\r\n    }\r\n\r\n    // this._addClassIn = true;\r\n    this._renderer.addClass(this._element.nativeElement, CLASS_NAME.IN);\r\n    if (!isBs3()) {\r\n      this._renderer.addClass(this._element.nativeElement, CLASS_NAME.SHOW);\r\n    }\r\n\r\n    const transitionComplete = () => {\r\n      if (this._config.focus) {\r\n        this._element.nativeElement.focus();\r\n      }\r\n      this.onShown.emit(this);\r\n    };\r\n\r\n    if (this._config.animated) {\r\n      setTimeout(transitionComplete, TRANSITION_DURATION);\r\n    } else {\r\n      transitionComplete();\r\n    }\r\n  }\r\n\r\n  /** @internal */\r\n  protected hideModal(): void {\r\n    this._renderer.setAttribute(\r\n      this._element.nativeElement,\r\n      'aria-hidden',\r\n      'true'\r\n    );\r\n    this._renderer.setStyle(\r\n      this._element.nativeElement,\r\n      'display',\r\n      'none'\r\n    );\r\n    this.showBackdrop(() => {\r\n      if (!this.isNested) {\r\n        if (document && document.body) {\r\n          this._renderer.removeClass(document.body, CLASS_NAME.OPEN);\r\n        }\r\n        this.resetScrollbar();\r\n      }\r\n      this.resetAdjustments();\r\n      this.focusOtherModal();\r\n      this.onHidden.emit(this);\r\n    });\r\n  }\r\n\r\n  // todo: original show was calling a callback when done, but we can use\r\n  // promise\r\n  /** @internal */\r\n  protected showBackdrop(callback?: Function): void {\r\n    if (\r\n      this._isShown &&\r\n      this.config.backdrop &&\r\n      (!this.backdrop || !this.backdrop.instance.isShown)\r\n    ) {\r\n      this.removeBackdrop();\r\n      this._backdrop\r\n        .attach(ModalBackdropComponent)\r\n        .to('body')\r\n        .show({isAnimated: this._config.animated});\r\n      this.backdrop = this._backdrop._componentRef;\r\n\r\n      if (!callback) {\r\n        return;\r\n      }\r\n\r\n      if (!this._config.animated) {\r\n        callback();\r\n\r\n        return;\r\n      }\r\n\r\n      setTimeout(callback, BACKDROP_TRANSITION_DURATION);\r\n    } else if (!this._isShown && this.backdrop) {\r\n      this.backdrop.instance.isShown = false;\r\n\r\n      const callbackRemove = () => {\r\n        this.removeBackdrop();\r\n        if (callback) {\r\n          callback();\r\n        }\r\n      };\r\n\r\n      if (this.backdrop.instance.isAnimated) {\r\n        this.timerRmBackDrop = window.setTimeout(\r\n          callbackRemove,\r\n          BACKDROP_TRANSITION_DURATION\r\n        );\r\n      } else {\r\n        callbackRemove();\r\n      }\r\n    } else if (callback) {\r\n      callback();\r\n    }\r\n  }\r\n\r\n  /** @internal */\r\n  protected removeBackdrop(): void {\r\n    this._backdrop.hide();\r\n  }\r\n\r\n  /** Events tricks */\r\n\r\n  // no need for it\r\n  // protected setEscapeEvent():void {\r\n  //   if (this._isShown && this._config.keyboard) {\r\n  //     $(this._element).on(Event.KEYDOWN_DISMISS, (event) => {\r\n  //       if (event.which === 27) {\r\n  //         this.hide()\r\n  //       }\r\n  //     })\r\n  //\r\n  //   } else if (!this._isShown) {\r\n  //     $(this._element).off(Event.KEYDOWN_DISMISS)\r\n  //   }\r\n  // }\r\n\r\n  // protected setResizeEvent():void {\r\n  // console.log(this.renderer.listenGlobal('', Event.RESIZE));\r\n  // if (this._isShown) {\r\n  //   $(window).on(Event.RESIZE, $.proxy(this._handleUpdate, this))\r\n  // } else {\r\n  //   $(window).off(Event.RESIZE)\r\n  // }\r\n  // }\r\n\r\n  protected focusOtherModal() {\r\n    if (this._element.nativeElement.parentElement == null) {\r\n      return;\r\n    }\r\n    const otherOpenedModals = this._element.nativeElement.parentElement.querySelectorAll('.in[bsModal]');\r\n    if (!otherOpenedModals.length) {\r\n      return;\r\n    }\r\n    otherOpenedModals[otherOpenedModals.length - 1].focus();\r\n  }\r\n\r\n  /** @internal */\r\n  protected resetAdjustments(): void {\r\n    this._renderer.setStyle(\r\n      this._element.nativeElement,\r\n      'paddingLeft',\r\n      ''\r\n    );\r\n    this._renderer.setStyle(\r\n      this._element.nativeElement,\r\n      'paddingRight',\r\n      ''\r\n    );\r\n  }\r\n\r\n  /** Scroll bar tricks */\r\n  /** @internal */\r\n  protected checkScrollbar(): void {\r\n    this.isBodyOverflowing = document.body.clientWidth < window.innerWidth;\r\n    this.scrollbarWidth = this.getScrollbarWidth();\r\n  }\r\n\r\n  protected setScrollbar(): void {\r\n    if (!document) {\r\n      return;\r\n    }\r\n\r\n    this.originalBodyPadding = parseInt(\r\n      window\r\n        .getComputedStyle(document.body)\r\n        .getPropertyValue('padding-right') || 0,\r\n      10\r\n    );\r\n\r\n    if (this.isBodyOverflowing) {\r\n      document.body.style.paddingRight = `${this.originalBodyPadding +\r\n      this.scrollbarWidth}px`;\r\n    }\r\n  }\r\n\r\n  protected resetScrollbar(): void {\r\n    document.body.style.paddingRight = `${this.originalBodyPadding}px`;\r\n  }\r\n\r\n  // thx d.walsh\r\n  protected getScrollbarWidth(): number {\r\n    const scrollDiv = this._renderer.createElement('div');\r\n    this._renderer.addClass(scrollDiv, CLASS_NAME.SCROLLBAR_MEASURER);\r\n    this._renderer.appendChild(document.body, scrollDiv);\r\n    const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\r\n    this._renderer.removeChild(document.body, scrollDiv);\r\n\r\n    return scrollbarWidth;\r\n  }\r\n}\r\n","import {\r\n  ComponentRef,\r\n  Injectable,\r\n  TemplateRef,\r\n  EventEmitter,\r\n  Renderer2,\r\n  RendererFactory2\r\n} from '@angular/core';\r\n\r\nimport { ComponentLoader, ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\r\nimport { ModalBackdropComponent } from './modal-backdrop.component';\r\nimport { ModalContainerComponent } from './modal-container.component';\r\nimport {\r\n  CLASS_NAME,\r\n  modalConfigDefaults,\r\n  ModalOptions,\r\n  TRANSITION_DURATIONS\r\n} from './modal-options.class';\r\nimport { BsModalRef } from './bs-modal-ref.service';\r\n\r\n@Injectable()\r\nexport class BsModalService {\r\n  // constructor props\r\n  config: ModalOptions = modalConfigDefaults;\r\n\r\n  // tslint:disable-next-line:no-any\r\n  onShow: EventEmitter<any> = new EventEmitter();\r\n  // tslint:disable-next-line:no-any\r\n  onShown: EventEmitter<any> = new EventEmitter();\r\n  // tslint:disable-next-line:no-any\r\n  onHide: EventEmitter<any> = new EventEmitter();\r\n  // tslint:disable-next-line:no-any\r\n  onHidden: EventEmitter<any> = new EventEmitter();\r\n\r\n  protected isBodyOverflowing = false;\r\n  protected originalBodyPadding = 0;\r\n\r\n  protected scrollbarWidth = 0;\r\n\r\n  protected backdropRef: ComponentRef<ModalBackdropComponent>;\r\n  private _backdropLoader: ComponentLoader<ModalBackdropComponent>;\r\n  private modalsCount = 0;\r\n  private lastDismissReason = '';\r\n\r\n  private loaders: ComponentLoader<ModalContainerComponent>[] = [];\r\n\r\n  private _renderer: Renderer2;\r\n\r\n  constructor(rendererFactory: RendererFactory2, private clf: ComponentLoaderFactory) {\r\n    this._backdropLoader = this.clf.createLoader<ModalBackdropComponent>(\r\n      null,\r\n      null,\r\n      null\r\n    );\r\n    this._renderer = rendererFactory.createRenderer(null, null);\r\n  }\r\n\r\n  /** Shows a modal */\r\n  // tslint:disable-next-line:no-any\r\n  show(content: string | TemplateRef<any> | any, config?: ModalOptions): BsModalRef {\r\n    this.modalsCount++;\r\n    this._createLoaders();\r\n    this.config = Object.assign({}, modalConfigDefaults, config);\r\n    this._showBackdrop();\r\n    this.lastDismissReason = null;\r\n\r\n    return this._showModal(content);\r\n  }\r\n\r\n  hide(level: number) {\r\n    if (this.modalsCount === 1) {\r\n      this._hideBackdrop();\r\n      this.resetScrollbar();\r\n    }\r\n    this.modalsCount = this.modalsCount >= 1 ? this.modalsCount - 1 : 0;\r\n    setTimeout(() => {\r\n      this._hideModal(level);\r\n      this.removeLoaders(level);\r\n    }, this.config.animated ? TRANSITION_DURATIONS.BACKDROP : 0);\r\n  }\r\n\r\n  _showBackdrop(): void {\r\n    const isBackdropEnabled =\r\n      this.config.backdrop || this.config.backdrop === 'static';\r\n    const isBackdropInDOM =\r\n      !this.backdropRef || !this.backdropRef.instance.isShown;\r\n\r\n    if (this.modalsCount === 1) {\r\n      this.removeBackdrop();\r\n\r\n      if (isBackdropEnabled && isBackdropInDOM) {\r\n        this._backdropLoader\r\n          .attach(ModalBackdropComponent)\r\n          .to('body')\r\n          .show({ isAnimated: this.config.animated });\r\n        this.backdropRef = this._backdropLoader._componentRef;\r\n      }\r\n    }\r\n  }\r\n\r\n  _hideBackdrop(): void {\r\n    if (!this.backdropRef) {\r\n      return;\r\n    }\r\n    this.backdropRef.instance.isShown = false;\r\n    const duration = this.config.animated ? TRANSITION_DURATIONS.BACKDROP : 0;\r\n    setTimeout(() => this.removeBackdrop(), duration);\r\n  }\r\n  // tslint:disable-next-line:no-any\r\n  _showModal(content: any): BsModalRef {\r\n    const modalLoader = this.loaders[this.loaders.length - 1];\r\n    const bsModalRef = new BsModalRef();\r\n    const modalContainerRef = modalLoader\r\n      .provide({ provide: ModalOptions, useValue: this.config })\r\n      .provide({ provide: BsModalRef, useValue: bsModalRef })\r\n      .attach(ModalContainerComponent)\r\n      .to('body')\r\n      .show({content, isAnimated: this.config.animated, initialState: this.config.initialState, bsModalService: this});\r\n    modalContainerRef.instance.level = this.getModalsCount();\r\n    bsModalRef.hide = () => {\r\n      modalContainerRef.instance.hide();\r\n    };\r\n    bsModalRef.content = modalLoader.getInnerComponent() || null;\r\n    bsModalRef.setClass = (newClass: string) => {\r\n      modalContainerRef.instance.config.class = newClass;\r\n    };\r\n\r\n    return bsModalRef;\r\n  }\r\n\r\n  _hideModal(level: number): void {\r\n    const modalLoader = this.loaders[level - 1];\r\n    if (modalLoader) {\r\n      modalLoader.hide();\r\n    }\r\n  }\r\n\r\n  getModalsCount(): number {\r\n    return this.modalsCount;\r\n  }\r\n\r\n  setDismissReason(reason: string) {\r\n    this.lastDismissReason = reason;\r\n  }\r\n\r\n  removeBackdrop(): void {\r\n    this._backdropLoader.hide();\r\n    this.backdropRef = null;\r\n  }\r\n\r\n  /** AFTER PR MERGE MODAL.COMPONENT WILL BE USING THIS CODE */\r\n  /** Scroll bar tricks */\r\n  /** @internal */\r\n  checkScrollbar(): void {\r\n    this.isBodyOverflowing = document.body.clientWidth < window.innerWidth;\r\n    this.scrollbarWidth = this.getScrollbarWidth();\r\n  }\r\n\r\n  setScrollbar(): void {\r\n    if (!document) {\r\n      return;\r\n    }\r\n\r\n    this.originalBodyPadding = parseInt(\r\n      window\r\n        .getComputedStyle(document.body)\r\n        .getPropertyValue('padding-right') || '0',\r\n      10\r\n    );\r\n\r\n    if (this.isBodyOverflowing) {\r\n      document.body.style.paddingRight = `${this.originalBodyPadding +\r\n        this.scrollbarWidth}px`;\r\n    }\r\n  }\r\n\r\n  private resetScrollbar(): void {\r\n    document.body.style.paddingRight = `${this.originalBodyPadding}px`;\r\n  }\r\n\r\n  // thx d.walsh\r\n  private getScrollbarWidth(): number {\r\n    const scrollDiv = this._renderer.createElement('div');\r\n    this._renderer.addClass(scrollDiv, CLASS_NAME.SCROLLBAR_MEASURER);\r\n    this._renderer.appendChild(document.body, scrollDiv);\r\n    const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\r\n    this._renderer.removeChild(document.body, scrollDiv);\r\n\r\n    return scrollbarWidth;\r\n  }\r\n\r\n  private _createLoaders(): void {\r\n    const loader = this.clf.createLoader<ModalContainerComponent>(\r\n      null,\r\n      null,\r\n      null\r\n    );\r\n    this.copyEvent(loader.onBeforeShow, this.onShow);\r\n    this.copyEvent(loader.onShown, this.onShown);\r\n    this.copyEvent(loader.onBeforeHide, this.onHide);\r\n    this.copyEvent(loader.onHidden, this.onHidden);\r\n    this.loaders.push(loader);\r\n  }\r\n\r\n  private removeLoaders(level: number): void {\r\n    this.loaders.splice(level - 1, 1);\r\n    this.loaders.forEach(\r\n      (loader: ComponentLoader<ModalContainerComponent>, i: number) => {\r\n        loader.instance.level = i + 1;\r\n      }\r\n    );\r\n  }\r\n\r\n  // tslint:disable-next-line:no-any\r\n  private copyEvent(from: EventEmitter<any>, to: EventEmitter<any>) {\r\n    from.subscribe(() => {\r\n      to.emit(this.lastDismissReason);\r\n    });\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { ModalBackdropComponent } from './modal-backdrop.component';\r\nimport { ModalDirective } from './modal.directive';\r\nimport { PositioningService } from 'ngx-bootstrap/positioning';\r\nimport { ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\r\nimport { ModalContainerComponent } from './modal-container.component';\r\nimport { BsModalService } from './bs-modal.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ModalBackdropComponent,\r\n    ModalDirective,\r\n    ModalContainerComponent\r\n  ],\r\n  exports: [ModalBackdropComponent, ModalDirective],\r\n  entryComponents: [ModalBackdropComponent, ModalContainerComponent]\r\n})\r\nexport class ModalModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: ModalModule,\r\n      providers: [BsModalService, ComponentLoaderFactory, PositioningService]\r\n    };\r\n  }\r\n}\r\n"]}