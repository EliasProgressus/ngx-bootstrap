{"version":3,"sources":["ng://ngx-bootstrap/carousel/carousel.config.ts","ng://ngx-bootstrap/carousel/carousel.component.ts","ng://ngx-bootstrap/carousel/slide.component.ts","ng://ngx-bootstrap/carousel/carousel.module.ts"],"names":["CarouselConfig","Injectable","CarouselComponent","config","ngZone","this","EventEmitter","LinkedList","Object","assign","prototype","_currentActiveSlide","index","_slides","length","_select","_interval","value","restartTimer","defineProperty","toArray","isBs3","ngOnDestroy","destroyed","addSlide","slide","add","activeSlide","play","removeSlide","_this","remIndex","indexOf","nextSlideIndex_1","isLast","noWrap","remove","setTimeout","currentSlideIndex_1","getCurrentSlideIndex","activeSlideChange","emit","nextSlide","force","findNextSlideIndex","Direction","NEXT","previousSlide","PREV","selectSlide","isPlaying","pause","noPause","resetTimer","findIndex","active","direction","nextSlideIndex","Error","isNaN","currentSlide","get","interval","currentInterval","runOutsideAngular","setInterval","nInterval","run","slides","clearInterval","Component","args","selector","template","NgZone","Input","Output","SlideComponent","carousel","ngOnInit","host","[attr.aria-hidden]","HostBinding","type","CarouselModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class CarouselConfig {\r\n  /** Default interval of auto changing of slides */\r\n  interval = 5000;\r\n\r\n  /** Is loop of auto changing of slides can be paused */\r\n  noPause = false;\r\n\r\n  /** Is slides can wrap from the last to the first slide */\r\n  noWrap = false;\r\n\r\n  /** Show carousel-indicators */\r\n  showIndicators = true;\r\n}\r\n","// tslint:disable:max-file-line-count\r\n/***\r\n * pause (not yet supported) (?string='hover') - event group name which pauses\r\n * the cycling of the carousel, if hover pauses on mouseenter and resumes on\r\n * mouseleave keyboard (not yet supported) (?boolean=true) - if false\r\n * carousel will not react to keyboard events\r\n * note: swiping not yet supported\r\n */\r\n/****\r\n * Problems:\r\n * 1) if we set an active slide via model changes, .active class remains on a\r\n * current slide.\r\n * 2) if we have only one slide, we shouldn't show prev/next nav buttons\r\n * 3) if first or last slide is active and noWrap is true, there should be\r\n * \"disabled\" class on the nav buttons.\r\n * 4) default interval should be equal 5000\r\n */\r\n\r\nimport {\r\n  Component, EventEmitter, Input, NgZone, OnDestroy, Output\r\n} from '@angular/core';\r\n\r\nimport { isBs3, LinkedList } from 'ngx-bootstrap/utils';\r\nimport { SlideComponent } from './slide.component';\r\nimport { CarouselConfig } from './carousel.config';\r\n\r\nexport enum Direction {\r\n  UNKNOWN,\r\n  NEXT,\r\n  PREV\r\n}\r\n\r\n/**\r\n * Base element to create carousel\r\n */\r\n@Component({\r\n  selector: 'carousel',\r\n  templateUrl: './carousel.component.html'\r\n})\r\nexport class CarouselComponent implements OnDestroy {\r\n  /** If `true` â carousel will not cycle continuously and will have hard stops (prevent looping) */\r\n  @Input() noWrap: boolean;\r\n  /**  If `true` â will disable pausing on carousel mouse hover */\r\n  @Input() noPause: boolean;\r\n  /**  If `true` â carousel-indicators are visible  */\r\n  @Input() showIndicators: boolean;\r\n\r\n  /** Will be emitted when active slide has been changed. Part of two-way-bindable [(activeSlide)] property */\r\n  @Output()\r\n  activeSlideChange: EventEmitter<number> = new EventEmitter<number>(false);\r\n\r\n  /** Index of currently displayed slide(started for 0) */\r\n  @Input()\r\n  set activeSlide(index: number) {\r\n    if (this._slides.length && index !== this._currentActiveSlide) {\r\n      this._select(index);\r\n    }\r\n  }\r\n\r\n  get activeSlide(): number {\r\n    return this._currentActiveSlide;\r\n  }\r\n\r\n  /**\r\n   * Delay of item cycling in milliseconds. If false, carousel won't cycle\r\n   * automatically.\r\n   */\r\n  @Input()\r\n  get interval(): number {\r\n    return this._interval;\r\n  }\r\n\r\n  set interval(value: number) {\r\n    this._interval = value;\r\n    this.restartTimer();\r\n  }\r\n\r\n  get slides(): SlideComponent[] {\r\n    return this._slides.toArray();\r\n  }\r\n\r\n  // tslint:disable-next-line:no-any\r\n  protected currentInterval: any;\r\n  protected _currentActiveSlide: number;\r\n  protected _interval: number;\r\n  protected _slides: LinkedList<SlideComponent> = new LinkedList<SlideComponent>();\r\n  protected isPlaying: boolean;\r\n  protected destroyed = false;\r\n\r\n  get isBs4(): boolean {\r\n    return !isBs3();\r\n  }\r\n\r\n  constructor(config: CarouselConfig, private ngZone: NgZone) {\r\n    Object.assign(this, config);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroyed = true;\r\n  }\r\n\r\n  /**\r\n   * Adds new slide. If this slide is first in collection - set it as active\r\n   * and starts auto changing\r\n   * @param slide\r\n   */\r\n  addSlide(slide: SlideComponent): void {\r\n    this._slides.add(slide);\r\n    if (this._slides.length === 1) {\r\n      this._currentActiveSlide = void 0;\r\n      this.activeSlide = 0;\r\n      this.play();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes specified slide. If this slide is active - will roll to another\r\n   * slide\r\n   * @param slide\r\n   */\r\n  removeSlide(slide: SlideComponent): void {\r\n    const remIndex = this._slides.indexOf(slide);\r\n\r\n    if (this._currentActiveSlide === remIndex) {\r\n      // removing of active slide\r\n      let nextSlideIndex: number = void 0;\r\n      if (this._slides.length > 1) {\r\n        // if this slide last - will roll to first slide, if noWrap flag is\r\n        // FALSE or to previous, if noWrap is TRUE in case, if this slide in\r\n        // middle of collection, index of next slide is same to removed\r\n        nextSlideIndex = !this.isLast(remIndex)\r\n          ? remIndex\r\n          : this.noWrap ? remIndex - 1 : 0;\r\n      }\r\n      this._slides.remove(remIndex);\r\n\r\n      // prevents exception with changing some value after checking\r\n      setTimeout(() => {\r\n        this._select(nextSlideIndex);\r\n      }, 0);\r\n    } else {\r\n      this._slides.remove(remIndex);\r\n      const currentSlideIndex = this.getCurrentSlideIndex();\r\n      setTimeout(() => {\r\n        // after removing, need to actualize index of current active slide\r\n        this._currentActiveSlide = currentSlideIndex;\r\n        this.activeSlideChange.emit(this._currentActiveSlide);\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Rolling to next slide\r\n   * @param force: {boolean} if true - will ignore noWrap flag\r\n   */\r\n  nextSlide(force = false): void {\r\n    this.activeSlide = this.findNextSlideIndex(Direction.NEXT, force);\r\n  }\r\n\r\n  /**\r\n   * Rolling to previous slide\r\n   * @param force: {boolean} if true - will ignore noWrap flag\r\n   */\r\n  previousSlide(force = false): void {\r\n    this.activeSlide = this.findNextSlideIndex(Direction.PREV, force);\r\n  }\r\n\r\n  /**\r\n   * Rolling to specified slide\r\n   * @param index: {number} index of slide, which must be shown\r\n   */\r\n  selectSlide(index: number): void {\r\n    this.activeSlide = index;\r\n  }\r\n\r\n  /**\r\n   * Starts a auto changing of slides\r\n   */\r\n  play(): void {\r\n    if (!this.isPlaying) {\r\n      this.isPlaying = true;\r\n      this.restartTimer();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stops a auto changing of slides\r\n   */\r\n  pause(): void {\r\n    if (!this.noPause) {\r\n      this.isPlaying = false;\r\n      this.resetTimer();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds and returns index of currently displayed slide\r\n   */\r\n  getCurrentSlideIndex(): number {\r\n    return this._slides.findIndex((slide: SlideComponent) => slide.active);\r\n  }\r\n\r\n  /**\r\n   * Defines, whether the specified index is last in collection\r\n   * @param index\r\n   */\r\n  isLast(index: number): boolean {\r\n    return index + 1 >= this._slides.length;\r\n  }\r\n\r\n  /**\r\n   * Defines next slide index, depending of direction\r\n   * @param direction: Direction(UNKNOWN|PREV|NEXT)\r\n   * @param force: {boolean} if TRUE - will ignore noWrap flag, else will\r\n   *   return undefined if next slide require wrapping\r\n   */\r\n  private findNextSlideIndex(direction: Direction, force: boolean): number {\r\n    let nextSlideIndex = 0;\r\n\r\n    if (\r\n      !force &&\r\n      (this.isLast(this.activeSlide) &&\r\n        direction !== Direction.PREV &&\r\n        this.noWrap)\r\n    ) {\r\n      return void 0;\r\n    }\r\n\r\n    switch (direction) {\r\n      case Direction.NEXT:\r\n        // if this is last slide, not force, looping is disabled\r\n        // and need to going forward - select current slide, as a next\r\n        nextSlideIndex = !this.isLast(this._currentActiveSlide)\r\n          ? this._currentActiveSlide + 1\r\n          : !force && this.noWrap ? this._currentActiveSlide : 0;\r\n        break;\r\n      case Direction.PREV:\r\n        // if this is first slide, not force, looping is disabled\r\n        // and need to going backward - select current slide, as a next\r\n        nextSlideIndex =\r\n          this._currentActiveSlide > 0\r\n            ? this._currentActiveSlide - 1\r\n            : !force && this.noWrap\r\n            ? this._currentActiveSlide\r\n            : this._slides.length - 1;\r\n        break;\r\n      default:\r\n        throw new Error('Unknown direction');\r\n    }\r\n\r\n    return nextSlideIndex;\r\n  }\r\n\r\n  /**\r\n   * Sets a slide, which specified through index, as active\r\n   * @param index\r\n   */\r\n  private _select(index: number): void {\r\n    if (isNaN(index)) {\r\n      this.pause();\r\n\r\n      return;\r\n    }\r\n    const currentSlide = this._slides.get(this._currentActiveSlide);\r\n    if (currentSlide) {\r\n      currentSlide.active = false;\r\n    }\r\n    const nextSlide = this._slides.get(index);\r\n    if (nextSlide) {\r\n      this._currentActiveSlide = index;\r\n      nextSlide.active = true;\r\n      this.activeSlide = index;\r\n      this.activeSlideChange.emit(index);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts loop of auto changing of slides\r\n   */\r\n  private restartTimer() {\r\n    this.resetTimer();\r\n    const interval = +this.interval;\r\n    if (!isNaN(interval) && interval > 0) {\r\n      this.currentInterval = this.ngZone.runOutsideAngular(() => {\r\n        return setInterval(() => {\r\n          const nInterval = +this.interval;\r\n          this.ngZone.run(() => {\r\n            if (\r\n              this.isPlaying &&\r\n              !isNaN(this.interval) &&\r\n              nInterval > 0 &&\r\n              this.slides.length\r\n            ) {\r\n              this.nextSlide();\r\n            } else {\r\n              this.pause();\r\n            }\r\n          });\r\n        }, interval);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stops loop of auto changing of slides\r\n   */\r\n  private resetTimer(): void {\r\n    if (this.currentInterval) {\r\n      clearInterval(this.currentInterval);\r\n      this.currentInterval = void 0;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  HostBinding,\r\n  OnDestroy,\r\n  Input,\r\n  OnInit\r\n} from '@angular/core';\r\n\r\nimport { CarouselComponent } from './carousel.component';\r\n\r\n@Component({\r\n  selector: 'slide',\r\n  template: `\r\n    <div [class.active]=\"active\" class=\"item\">\r\n      <ng-content></ng-content>\r\n    </div>\r\n  `,\r\n  host: {\r\n    '[attr.aria-hidden]': '!active'\r\n  }\r\n})\r\nexport class SlideComponent implements OnInit, OnDestroy {\r\n  /** Is current slide active */\r\n  @HostBinding('class.active')\r\n  @Input()\r\n  active: boolean;\r\n\r\n  /** Wraps element by appropriate CSS classes */\r\n  @HostBinding('class.item')\r\n  @HostBinding('class.carousel-item')\r\n  addClass = true;\r\n\r\n  /** Link to Parent(container-collection) component */\r\n  protected carousel: CarouselComponent;\r\n\r\n  constructor(carousel: CarouselComponent) {\r\n    this.carousel = carousel;\r\n  }\r\n\r\n  /** Fires changes in container collection after adding a new slide instance */\r\n  ngOnInit(): void {\r\n    this.carousel.addSlide(this);\r\n  }\r\n\r\n  /** Fires changes in container collection after removing of this slide instance */\r\n  ngOnDestroy(): void {\r\n    this.carousel.removeSlide(this);\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { CarouselComponent } from './carousel.component';\r\nimport { SlideComponent } from './slide.component';\r\nimport { CarouselConfig } from './carousel.config';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [SlideComponent, CarouselComponent],\r\n  exports: [SlideComponent, CarouselComponent],\r\n  providers: [CarouselConfig]\r\n})\r\nexport class CarouselModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return { ngModule: CarouselModule, providers: [] };\r\n  }\r\n}\r\n"]}