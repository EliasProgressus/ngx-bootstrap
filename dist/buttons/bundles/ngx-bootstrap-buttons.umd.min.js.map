{"version":3,"sources":["ng://ngx-bootstrap/buttons/button-checkbox.directive.ts","ng://ngx-bootstrap/buttons/button-radio-group.directive.ts","ng://ngx-bootstrap/buttons/button-radio.directive.ts","ng://ngx-bootstrap/buttons/buttons.module.ts"],"names":["CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","ButtonCheckboxDirective","multi","Function","prototype","onClick","this","isDisabled","toggle","state","onChange","value","ngOnInit","trueValue","Object","defineProperty","btnCheckboxTrue","btnCheckboxFalse","falseValue","writeValue","setDisabledState","registerOnChange","fn","registerOnTouched","onTouched","Directive","args","selector","providers","Input","HostBinding","type","HostListener","RADIO_CONTROL_VALUE_ACCESSOR","ButtonRadioGroupDirective","cdr","_value","markForCheck","ChangeDetectorRef","ButtonRadioDirective","el","group","renderer","_disabled","disabled","btnRadio","nativeElement","attributes","uncheckable","undefined","_onChange","onBlur","setAttribute","removeAttribute","ElementRef","decorators","Optional","Renderer2","ButtonsModule","forRoot","ngModule","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["// tslint:disable:no-use-before-declare\r\nimport {\r\n  Directive,\r\n  forwardRef,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  OnInit,\r\n  Provider\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\n// TODO: config: activeClass - Class to apply to the checked buttons\r\nexport const CHECKBOX_CONTROL_VALUE_ACCESSOR: Provider = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  /* tslint:disable-next-line: no-use-before-declare */\r\n  useExisting: forwardRef(() => ButtonCheckboxDirective),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * Add checkbox functionality to any element\r\n */\r\n@Directive({\r\n  selector: '[btnCheckbox]',\r\n  providers: [CHECKBOX_CONTROL_VALUE_ACCESSOR]\r\n})\r\nexport class ButtonCheckboxDirective implements ControlValueAccessor, OnInit {\r\n  /** Truthy value, will be set to ngModel */\r\n  @Input() btnCheckboxTrue = true;\r\n  /** Falsy value, will be set to ngModel */\r\n  @Input() btnCheckboxFalse = false;\r\n\r\n  @HostBinding('class.active')\r\n  @HostBinding('attr.aria-pressed')\r\n  state = false;\r\n\r\n  protected value: boolean | string;\r\n  protected isDisabled: boolean;\r\n\r\n  protected onChange = Function.prototype;\r\n  protected onTouched = Function.prototype;\r\n\r\n  // view -> model\r\n  @HostListener('click')\r\n  onClick(): void {\r\n    if (this.isDisabled) {\r\n      return;\r\n    }\r\n\r\n    this.toggle(!this.state);\r\n    this.onChange(this.value);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.toggle(this.trueValue === this.value);\r\n  }\r\n\r\n  protected get trueValue(): boolean {\r\n    return typeof this.btnCheckboxTrue !== 'undefined'\r\n      ? this.btnCheckboxTrue\r\n      : true;\r\n  }\r\n\r\n  protected get falseValue(): boolean {\r\n    return typeof this.btnCheckboxFalse !== 'undefined'\r\n      ? this.btnCheckboxFalse\r\n      : false;\r\n  }\r\n\r\n  toggle(state: boolean): void {\r\n    this.state = state;\r\n    this.value = this.state ? this.trueValue : this.falseValue;\r\n  }\r\n\r\n  // ControlValueAccessor\r\n  // model -> view\r\n  writeValue(value: boolean | string | null): void {\r\n    this.state = this.trueValue === value;\r\n    this.value = value ? this.trueValue : this.falseValue;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.isDisabled = isDisabled;\r\n  }\r\n\r\n  registerOnChange(fn: () => {}): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => {}): void {\r\n    this.onTouched = fn;\r\n  }\r\n}\r\n","import { ChangeDetectorRef, Directive, forwardRef, Provider } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  /* tslint:disable-next-line: no-use-before-declare */\r\n  useExisting: forwardRef(() => ButtonRadioGroupDirective),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * A group of radio buttons.\r\n * A value of a selected button is bound to a variable specified via ngModel.\r\n */\r\n@Directive({\r\n  selector: '[btnRadioGroup]',\r\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\r\n})\r\nexport class ButtonRadioGroupDirective implements ControlValueAccessor {\r\n  onChange = Function.prototype;\r\n  onTouched = Function.prototype;\r\n\r\n  get value() {\r\n    return this._value;\r\n  }\r\n  set value(value: string | null) {\r\n    this._value = value;\r\n  }\r\n\r\n  private _value: string | null;\r\n\r\n  constructor(private cdr: ChangeDetectorRef) {}\r\n\r\n  writeValue(value: string | null): void {\r\n    this._value = value;\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  registerOnChange(fn: () => {}): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => {}): void {\r\n    this.onTouched = fn;\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectorRef,\r\n  Directive,\r\n  ElementRef,\r\n  forwardRef,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  OnInit,\r\n  Optional,\r\n  Provider,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\r\n\r\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  /* tslint:disable-next-line: no-use-before-declare */\r\n  useExisting: forwardRef(() => ButtonRadioDirective),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * Create radio buttons or groups of buttons.\r\n * A value of a selected button is bound to a variable specified via ngModel.\r\n */\r\n@Directive({\r\n  selector: '[btnRadio]',\r\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\r\n})\r\nexport class ButtonRadioDirective implements ControlValueAccessor, OnInit {\r\n  onChange = Function.prototype;\r\n  onTouched = Function.prototype;\r\n\r\n  /** Radio button value, will be set to `ngModel` */\r\n  @Input() btnRadio: string;\r\n  /** If `true` â radio button can be unchecked */\r\n  @Input() uncheckable: boolean;\r\n  /** Current value of radio component or group */\r\n  @Input() get value() {\r\n    return this.group ? this.group.value : this._value;\r\n  }\r\n\r\n  set value(value: null | string) {\r\n    if (this.group) {\r\n      this.group.value = value;\r\n\r\n      return;\r\n    }\r\n    this._value = value;\r\n  }\r\n  /** If `true` â radio button is disabled */\r\n  @Input() get disabled(): boolean {\r\n    return this._disabled;\r\n  }\r\n\r\n  set disabled(disabled: boolean) {\r\n    this._disabled = disabled;\r\n    this.setDisabledState(disabled);\r\n  }\r\n\r\n  @HostBinding('class.active')\r\n  @HostBinding('attr.aria-pressed')\r\n  get isActive(): boolean {\r\n    return this.btnRadio === this.value;\r\n  }\r\n\r\n  private _value:  null | string;\r\n  private _disabled: boolean;\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private cdr: ChangeDetectorRef,\r\n    @Optional() private group: ButtonRadioGroupDirective,\r\n    private renderer: Renderer2\r\n  ) {}\r\n\r\n  @HostListener('click')\r\n  onClick(): void {\r\n    if (this.el.nativeElement.attributes.disabled || !this.uncheckable && this.btnRadio === this.value) {\r\n      return;\r\n    }\r\n\r\n    this.value = this.uncheckable && this.btnRadio === this.value ? undefined : this.btnRadio;\r\n    this._onChange(this.value);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.uncheckable = typeof this.uncheckable !== 'undefined';\r\n  }\r\n\r\n  onBlur(): void {\r\n    this.onTouched();\r\n  }\r\n\r\n  _onChange(value: string): void {\r\n    if (this.group) {\r\n      this.group.onTouched();\r\n      this.group.onChange(value);\r\n\r\n      return;\r\n    }\r\n    this.onTouched();\r\n    this.onChange(value);\r\n  }\r\n\r\n  // ControlValueAccessor\r\n  // model -> view\r\n  writeValue(value: string): void {\r\n    this.value = value;\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  registerOnChange(fn: () => {}): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => {}): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(disabled: boolean): void {\r\n    if (disabled) {\r\n      this.renderer.setAttribute(this.el.nativeElement, 'disabled', 'disabled');\r\n\r\n      return;\r\n    }\r\n    this.renderer.removeAttribute(this.el.nativeElement, 'disabled');\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { ButtonCheckboxDirective } from './button-checkbox.directive';\r\nimport { ButtonRadioDirective } from './button-radio.directive';\r\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\r\n\r\n@NgModule({\r\n  declarations: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective],\r\n  exports: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective]\r\n})\r\nexport class ButtonsModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return { ngModule: ButtonsModule, providers: [] };\r\n  }\r\n}\r\n"]}