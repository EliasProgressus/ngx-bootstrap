{"version":3,"file":"ngx-bootstrap-buttons.js.map","sources":["ng://ngx-bootstrap/buttons/button-checkbox.directive.ts","ng://ngx-bootstrap/buttons/button-radio-group.directive.ts","ng://ngx-bootstrap/buttons/button-radio.directive.ts","ng://ngx-bootstrap/buttons/buttons.module.ts"],"sourcesContent":["// tslint:disable:no-use-before-declare\r\nimport {\r\n  Directive,\r\n  forwardRef,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  OnInit,\r\n  Provider\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\n// TODO: config: activeClass - Class to apply to the checked buttons\r\nexport const CHECKBOX_CONTROL_VALUE_ACCESSOR: Provider = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  /* tslint:disable-next-line: no-use-before-declare */\r\n  useExisting: forwardRef(() => ButtonCheckboxDirective),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * Add checkbox functionality to any element\r\n */\r\n@Directive({\r\n  selector: '[btnCheckbox]',\r\n  providers: [CHECKBOX_CONTROL_VALUE_ACCESSOR]\r\n})\r\nexport class ButtonCheckboxDirective implements ControlValueAccessor, OnInit {\r\n  /** Truthy value, will be set to ngModel */\r\n  @Input() btnCheckboxTrue = true;\r\n  /** Falsy value, will be set to ngModel */\r\n  @Input() btnCheckboxFalse = false;\r\n\r\n  @HostBinding('class.active')\r\n  @HostBinding('attr.aria-pressed')\r\n  state = false;\r\n\r\n  protected value: boolean | string;\r\n  protected isDisabled: boolean;\r\n\r\n  protected onChange = Function.prototype;\r\n  protected onTouched = Function.prototype;\r\n\r\n  // view -> model\r\n  @HostListener('click')\r\n  onClick(): void {\r\n    if (this.isDisabled) {\r\n      return;\r\n    }\r\n\r\n    this.toggle(!this.state);\r\n    this.onChange(this.value);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.toggle(this.trueValue === this.value);\r\n  }\r\n\r\n  protected get trueValue(): boolean {\r\n    return typeof this.btnCheckboxTrue !== 'undefined'\r\n      ? this.btnCheckboxTrue\r\n      : true;\r\n  }\r\n\r\n  protected get falseValue(): boolean {\r\n    return typeof this.btnCheckboxFalse !== 'undefined'\r\n      ? this.btnCheckboxFalse\r\n      : false;\r\n  }\r\n\r\n  toggle(state: boolean): void {\r\n    this.state = state;\r\n    this.value = this.state ? this.trueValue : this.falseValue;\r\n  }\r\n\r\n  // ControlValueAccessor\r\n  // model -> view\r\n  writeValue(value: boolean | string | null): void {\r\n    this.state = this.trueValue === value;\r\n    this.value = value ? this.trueValue : this.falseValue;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.isDisabled = isDisabled;\r\n  }\r\n\r\n  registerOnChange(fn: () => {}): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => {}): void {\r\n    this.onTouched = fn;\r\n  }\r\n}\r\n","import { ChangeDetectorRef, Directive, forwardRef, Provider } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  /* tslint:disable-next-line: no-use-before-declare */\r\n  useExisting: forwardRef(() => ButtonRadioGroupDirective),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * A group of radio buttons.\r\n * A value of a selected button is bound to a variable specified via ngModel.\r\n */\r\n@Directive({\r\n  selector: '[btnRadioGroup]',\r\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\r\n})\r\nexport class ButtonRadioGroupDirective implements ControlValueAccessor {\r\n  onChange = Function.prototype;\r\n  onTouched = Function.prototype;\r\n\r\n  get value() {\r\n    return this._value;\r\n  }\r\n  set value(value: string | null) {\r\n    this._value = value;\r\n  }\r\n\r\n  private _value: string | null;\r\n\r\n  constructor(private cdr: ChangeDetectorRef) {}\r\n\r\n  writeValue(value: string | null): void {\r\n    this._value = value;\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  registerOnChange(fn: () => {}): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => {}): void {\r\n    this.onTouched = fn;\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectorRef,\r\n  Directive,\r\n  ElementRef,\r\n  forwardRef,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  OnInit,\r\n  Optional,\r\n  Provider,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\r\n\r\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  /* tslint:disable-next-line: no-use-before-declare */\r\n  useExisting: forwardRef(() => ButtonRadioDirective),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * Create radio buttons or groups of buttons.\r\n * A value of a selected button is bound to a variable specified via ngModel.\r\n */\r\n@Directive({\r\n  selector: '[btnRadio]',\r\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\r\n})\r\nexport class ButtonRadioDirective implements ControlValueAccessor, OnInit {\r\n  onChange = Function.prototype;\r\n  onTouched = Function.prototype;\r\n\r\n  /** Radio button value, will be set to `ngModel` */\r\n  @Input() btnRadio: string;\r\n  /** If `true` â radio button can be unchecked */\r\n  @Input() uncheckable: boolean;\r\n  /** Current value of radio component or group */\r\n  @Input() get value() {\r\n    return this.group ? this.group.value : this._value;\r\n  }\r\n\r\n  set value(value: null | string) {\r\n    if (this.group) {\r\n      this.group.value = value;\r\n\r\n      return;\r\n    }\r\n    this._value = value;\r\n  }\r\n  /** If `true` â radio button is disabled */\r\n  @Input() get disabled(): boolean {\r\n    return this._disabled;\r\n  }\r\n\r\n  set disabled(disabled: boolean) {\r\n    this._disabled = disabled;\r\n    this.setDisabledState(disabled);\r\n  }\r\n\r\n  @HostBinding('class.active')\r\n  @HostBinding('attr.aria-pressed')\r\n  get isActive(): boolean {\r\n    return this.btnRadio === this.value;\r\n  }\r\n\r\n  private _value:  null | string;\r\n  private _disabled: boolean;\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private cdr: ChangeDetectorRef,\r\n    @Optional() private group: ButtonRadioGroupDirective,\r\n    private renderer: Renderer2\r\n  ) {}\r\n\r\n  @HostListener('click')\r\n  onClick(): void {\r\n    if (this.el.nativeElement.attributes.disabled || !this.uncheckable && this.btnRadio === this.value) {\r\n      return;\r\n    }\r\n\r\n    this.value = this.uncheckable && this.btnRadio === this.value ? undefined : this.btnRadio;\r\n    this._onChange(this.value);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.uncheckable = typeof this.uncheckable !== 'undefined';\r\n  }\r\n\r\n  onBlur(): void {\r\n    this.onTouched();\r\n  }\r\n\r\n  _onChange(value: string): void {\r\n    if (this.group) {\r\n      this.group.onTouched();\r\n      this.group.onChange(value);\r\n\r\n      return;\r\n    }\r\n    this.onTouched();\r\n    this.onChange(value);\r\n  }\r\n\r\n  // ControlValueAccessor\r\n  // model -> view\r\n  writeValue(value: string): void {\r\n    this.value = value;\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  registerOnChange(fn: () => {}): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => {}): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(disabled: boolean): void {\r\n    if (disabled) {\r\n      this.renderer.setAttribute(this.el.nativeElement, 'disabled', 'disabled');\r\n\r\n      return;\r\n    }\r\n    this.renderer.removeAttribute(this.el.nativeElement, 'disabled');\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { ButtonCheckboxDirective } from './button-checkbox.directive';\r\nimport { ButtonRadioDirective } from './button-radio.directive';\r\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\r\n\r\n@NgModule({\r\n  declarations: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective],\r\n  exports: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective]\r\n})\r\nexport class ButtonsModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return { ngModule: ButtonsModule, providers: [] };\r\n  }\r\n}\r\n"],"names":["RADIO_CONTROL_VALUE_ACCESSOR"],"mappings":"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"}
