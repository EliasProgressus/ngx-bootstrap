{"version":3,"sources":["ng://ngx-bootstrap/pagination/pagination.config.ts","ng://ngx-bootstrap/pagination/pager.component.ts","ng://ngx-bootstrap/pagination/pagination.component.ts","ng://ngx-bootstrap/pagination/pagination.module.ts"],"names":["maxSize","itemsPerPage","boundaryLinks","directionLinks","firstText","previousText","nextText","lastText","pageBtnClass","rotate","align","Injectable","PAGER_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","PagerComponent","multi","elementRef","paginationConfig","changeDetection","this","EventEmitter","Function","prototype","config","configureOptions","Object","assign","main","pager","_itemsPerPage","v","totalPages","calculateTotalPages","_totalItems","defineProperty","_totalPages","numPages","emit","inited","selectPage","page","_page","value","_previous","markForCheck","pageChanged","ngOnInit","window","classMap","nativeElement","getAttribute","pages","getPages","writeValue","getText","key","noPrevious","noNext","registerOnChange","fn","onChange","registerOnTouched","onTouched","event","preventDefault","disabled","target","blur","makePage","num","text","active","number","currentPage","startPage","endPage","isMaxSized","Math","max","floor","ceil","min","toString","push","previousPageSet","unshift","nextPageSet","totalItems","Component","args","selector","template","providers","ElementRef","PaginationConfig","ChangeDetectorRef","Input","Output","PAGINATION_CONTROL_VALUE_ACCESSOR","PaginationComponent","PaginationModule","forRoot","ngModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["// todo: split\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { ConfigModel, PagerModel } from './models';\r\n\r\n/** Provides default values for Pagination and pager components */\r\n@Injectable()\r\nexport class PaginationConfig {\r\n  main: ConfigModel = {\r\n    maxSize: void 0,\r\n    itemsPerPage: 10,\r\n    boundaryLinks: false,\r\n    directionLinks: true,\r\n    firstText: 'First',\r\n    previousText: 'Previous',\r\n    nextText: 'Next',\r\n    lastText: 'Last',\r\n    pageBtnClass: '',\r\n    rotate: true\r\n  };\r\n  pager: PagerModel = {\r\n    itemsPerPage: 15,\r\n    previousText: 'Â« Previous',\r\n    nextText: 'Next Â»',\r\n    pageBtnClass: '',\r\n    align: true\r\n  };\r\n}\r\n","import {\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  Provider\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nimport { PageChangedEvent } from './pagination.component';\r\nimport { PaginationConfig } from './pagination.config';\r\n\r\nimport { ConfigModel, PagesModel } from './models';\r\n\r\nexport const PAGER_CONTROL_VALUE_ACCESSOR: Provider = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  /* tslint:disable-next-line: no-use-before-declare */\r\n  useExisting: forwardRef(() => PagerComponent),\r\n  multi: true\r\n};\r\n\r\n@Component({\r\n  selector: 'pager',\r\n  templateUrl: './pager.component.html',\r\n  providers: [PAGER_CONTROL_VALUE_ACCESSOR]\r\n})\r\nexport class PagerComponent implements ControlValueAccessor, OnInit {\r\n  config: ConfigModel;\r\n  /** if `true` aligns each link to the sides of pager */\r\n  @Input() align: boolean;\r\n  /** limit number for page links in pager */\r\n  @Input() maxSize: number;\r\n  /** if false first and last buttons will be hidden */\r\n  @Input() boundaryLinks: boolean;\r\n  /** if false previous and next buttons will be hidden */\r\n  @Input() directionLinks: boolean;\r\n  // labels\r\n  /** first button text */\r\n  @Input() firstText: string;\r\n  /** previous button text */\r\n  @Input() previousText: string;\r\n  /** next button text */\r\n  @Input() nextText: string;\r\n  /** last button text */\r\n  @Input() lastText: string;\r\n  /** if true current page will in the middle of pages list */\r\n  @Input() rotate: boolean;\r\n  // css\r\n  /** add class to <code><li\\></code> */\r\n  @Input() pageBtnClass: string;\r\n\r\n  /** if true pagination component will be disabled */\r\n  @Input() disabled: boolean;\r\n\r\n  /** fired when total pages count changes, $event:number equals to total pages count */\r\n  @Output() numPages: EventEmitter<number> = new EventEmitter<number>();\r\n  /** fired when page was changed, $event:{page, itemsPerPage} equals to\r\n   * object with current page index and number of items per page\r\n   */\r\n  @Output()\r\n  pageChanged: EventEmitter<PageChangedEvent> = new EventEmitter<PageChangedEvent>();\r\n\r\n  /** maximum number of items per page. If value less than 1 will display all items on one page */\r\n  @Input()\r\n  get itemsPerPage(): number {\r\n    return this._itemsPerPage;\r\n  }\r\n\r\n  set itemsPerPage(v: number) {\r\n    this._itemsPerPage = v;\r\n    this.totalPages = this.calculateTotalPages();\r\n  }\r\n\r\n  /** total number of items in all pages */\r\n  @Input()\r\n  get totalItems(): number {\r\n    return this._totalItems;\r\n  }\r\n\r\n  set totalItems(v: number) {\r\n    this._totalItems = v;\r\n    this.totalPages = this.calculateTotalPages();\r\n  }\r\n\r\n  get totalPages(): number {\r\n    return this._totalPages;\r\n  }\r\n\r\n  set totalPages(v: number) {\r\n    this._totalPages = v;\r\n    this.numPages.emit(v);\r\n    if (this.inited) {\r\n      this.selectPage(this.page);\r\n    }\r\n  }\r\n\r\n  set page(value: number) {\r\n    const _previous = this._page;\r\n    this._page = value > this.totalPages ? this.totalPages : value || 1;\r\n    this.changeDetection.markForCheck();\r\n\r\n    if (_previous === this._page || typeof _previous === 'undefined') {\r\n      return;\r\n    }\r\n\r\n    this.pageChanged.emit({\r\n      page: this._page,\r\n      itemsPerPage: this.itemsPerPage\r\n    });\r\n  }\r\n\r\n  get page(): number {\r\n    return this._page;\r\n  }\r\n\r\n  onChange = Function.prototype;\r\n  onTouched = Function.prototype;\r\n\r\n  classMap: string;\r\n  pages: PagesModel[];\r\n\r\n  protected _itemsPerPage: number;\r\n  protected _totalItems: number;\r\n  protected _totalPages: number;\r\n  protected inited = false;\r\n  protected _page = 1;\r\n\r\n  constructor(private elementRef: ElementRef,\r\n              paginationConfig: PaginationConfig,\r\n              private changeDetection: ChangeDetectorRef) {\r\n    this.elementRef = elementRef;\r\n    if (!this.config) {\r\n      this.configureOptions(\r\n        Object.assign({}, paginationConfig.main, paginationConfig.pager)\r\n      );\r\n    }\r\n  }\r\n\r\n  configureOptions(config: ConfigModel): void {\r\n    this.config = Object.assign({}, config);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (typeof window !== 'undefined') {\r\n      this.classMap = this.elementRef.nativeElement.getAttribute('class') || '';\r\n    }\r\n    // watch for maxSize\r\n    this.maxSize =\r\n      typeof this.maxSize !== 'undefined' ? this.maxSize : this.config.maxSize;\r\n    this.rotate =\r\n      typeof this.rotate !== 'undefined' ? this.rotate : this.config.rotate;\r\n    this.boundaryLinks =\r\n      typeof this.boundaryLinks !== 'undefined'\r\n        ? this.boundaryLinks\r\n        : this.config.boundaryLinks;\r\n    this.directionLinks =\r\n      typeof this.directionLinks !== 'undefined'\r\n        ? this.directionLinks\r\n        : this.config.directionLinks;\r\n    this.pageBtnClass =\r\n      typeof this.pageBtnClass !== 'undefined'\r\n        ? this.pageBtnClass\r\n        : this.config.pageBtnClass;\r\n\r\n    // base class\r\n    this.itemsPerPage =\r\n      typeof this.itemsPerPage !== 'undefined'\r\n        ? this.itemsPerPage\r\n        : this.config.itemsPerPage;\r\n    this.totalPages = this.calculateTotalPages();\r\n    // this class\r\n    this.pages = this.getPages(this.page, this.totalPages);\r\n    this.inited = true;\r\n  }\r\n\r\n  writeValue(value: number): void {\r\n    this.page = value;\r\n    this.pages = this.getPages(this.page, this.totalPages);\r\n  }\r\n\r\n  getText(key: string): string {\r\n    // tslint:disable-next-line:no-any\r\n    return (this as any)[`${key}Text`] || this.config[`${key}Text`];\r\n  }\r\n\r\n  noPrevious(): boolean {\r\n    return this.page === 1;\r\n  }\r\n\r\n  noNext(): boolean {\r\n    return this.page === this.totalPages;\r\n  }\r\n\r\n  registerOnChange(fn: () => {}): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => {}): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  selectPage(page: number, event?: Event): void {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    if (!this.disabled) {\r\n      if (event && event.target) {\r\n        // tslint:disable-next-line:no-any\r\n        const target: any = event.target;\r\n        target.blur();\r\n      }\r\n      this.writeValue(page);\r\n      this.onChange(this.page);\r\n    }\r\n  }\r\n\r\n  // Create page object used in template\r\n  protected makePage(num: number,\r\n                     text: string,\r\n                     active: boolean): { number: number; text: string; active: boolean } {\r\n    return {text, number: num, active};\r\n  }\r\n\r\n  protected getPages(currentPage: number, totalPages: number): PagesModel[] {\r\n    const pages: PagesModel[] = [];\r\n\r\n    // Default page limits\r\n    let startPage = 1;\r\n    let endPage = totalPages;\r\n    const isMaxSized =\r\n      typeof this.maxSize !== 'undefined' && this.maxSize < totalPages;\r\n\r\n    // recompute if maxSize\r\n    if (isMaxSized) {\r\n      if (this.rotate) {\r\n        // Current page is displayed in the middle of the visible ones\r\n        startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);\r\n        endPage = startPage + this.maxSize - 1;\r\n\r\n        // Adjust if limit is exceeded\r\n        if (endPage > totalPages) {\r\n          endPage = totalPages;\r\n          startPage = endPage - this.maxSize + 1;\r\n        }\r\n      } else {\r\n        // Visible pages are paginated with maxSize\r\n        startPage =\r\n          (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;\r\n\r\n        // Adjust last page if limit is exceeded\r\n        endPage = Math.min(startPage + this.maxSize - 1, totalPages);\r\n      }\r\n    }\r\n\r\n    // Add page number links\r\n    for (let num = startPage; num <= endPage; num++) {\r\n      const page = this.makePage(num, num.toString(), num === currentPage);\r\n      pages.push(page);\r\n    }\r\n\r\n    // Add links to move between page sets\r\n    if (isMaxSized && !this.rotate) {\r\n      if (startPage > 1) {\r\n        const previousPageSet = this.makePage(startPage - 1, '...', false);\r\n        pages.unshift(previousPageSet);\r\n      }\r\n\r\n      if (endPage < totalPages) {\r\n        const nextPageSet = this.makePage(endPage + 1, '...', false);\r\n        pages.push(nextPageSet);\r\n      }\r\n    }\r\n\r\n    return pages;\r\n  }\r\n\r\n  // base class\r\n  protected calculateTotalPages(): number {\r\n    const totalPages =\r\n      this.itemsPerPage < 1\r\n        ? 1\r\n        : Math.ceil(this.totalItems / this.itemsPerPage);\r\n\r\n    return Math.max(totalPages || 0, 1);\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  Provider\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nimport { PaginationConfig } from './pagination.config';\r\n\r\nimport { ConfigModel, PagesModel } from './models';\r\n\r\nexport interface PageChangedEvent {\r\n  itemsPerPage: number;\r\n  page: number;\r\n}\r\n\r\nexport const PAGINATION_CONTROL_VALUE_ACCESSOR: Provider = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  /* tslint:disable-next-line: no-use-before-declare */\r\n  useExisting: forwardRef(() => PaginationComponent),\r\n  multi: true\r\n};\r\n\r\n@Component({\r\n  selector: 'pagination',\r\n  templateUrl: './pagination.component.html',\r\n  providers: [PAGINATION_CONTROL_VALUE_ACCESSOR]\r\n})\r\nexport class PaginationComponent implements ControlValueAccessor, OnInit {\r\n  config: ConfigModel;\r\n  /** if `true` aligns each link to the sides of pager */\r\n  @Input() align: boolean;\r\n  /** limit number for page links in pager */\r\n  @Input() maxSize: number;\r\n  /** if false first and last buttons will be hidden */\r\n  @Input() boundaryLinks: boolean;\r\n  /** if false previous and next buttons will be hidden */\r\n  @Input() directionLinks: boolean;\r\n  // labels\r\n  /** first button text */\r\n  @Input() firstText: string;\r\n  /** previous button text */\r\n  @Input() previousText: string;\r\n  /** next button text */\r\n  @Input() nextText: string;\r\n  /** last button text */\r\n  @Input() lastText: string;\r\n  /** if true current page will in the middle of pages list */\r\n  @Input() rotate: boolean;\r\n  // css\r\n  /** add class to <code><li\\></code> */\r\n  @Input() pageBtnClass: string;\r\n\r\n  /** if true pagination component will be disabled */\r\n  @Input() disabled: boolean;\r\n\r\n  /** fired when total pages count changes, $event:number equals to total pages count */\r\n  @Output() numPages: EventEmitter<number> = new EventEmitter<number>();\r\n  /** fired when page was changed, $event:{page, itemsPerPage} equals to object\r\n   * with current page index and number of items per page\r\n   */\r\n  @Output()\r\n  pageChanged = new EventEmitter<PageChangedEvent>();\r\n\r\n  /** maximum number of items per page. If value less than 1 will display all items on one page */\r\n  @Input()\r\n  get itemsPerPage(): number {\r\n    return this._itemsPerPage;\r\n  }\r\n\r\n  set itemsPerPage(v: number) {\r\n    this._itemsPerPage = v;\r\n    this.totalPages = this.calculateTotalPages();\r\n  }\r\n\r\n  /** total number of items in all pages */\r\n  @Input()\r\n  get totalItems(): number {\r\n    return this._totalItems;\r\n  }\r\n\r\n  set totalItems(v: number) {\r\n    this._totalItems = v;\r\n    this.totalPages = this.calculateTotalPages();\r\n  }\r\n\r\n  get totalPages(): number {\r\n    return this._totalPages;\r\n  }\r\n\r\n  set totalPages(v: number) {\r\n    this._totalPages = v;\r\n    this.numPages.emit(v);\r\n    if (this.inited) {\r\n      this.selectPage(this.page);\r\n    }\r\n  }\r\n\r\n  set page(value: number) {\r\n    const _previous = this._page;\r\n    this._page = value > this.totalPages ? this.totalPages : value || 1;\r\n    this.changeDetection.markForCheck();\r\n\r\n    if (_previous === this._page || typeof _previous === 'undefined') {\r\n      return;\r\n    }\r\n\r\n    this.pageChanged.emit({\r\n      page: this._page,\r\n      itemsPerPage: this.itemsPerPage\r\n    });\r\n  }\r\n\r\n  get page(): number {\r\n    return this._page;\r\n  }\r\n\r\n  onChange = Function.prototype;\r\n  onTouched = Function.prototype;\r\n\r\n  classMap: string;\r\n  pages: PagesModel[];\r\n\r\n  protected _itemsPerPage: number;\r\n  protected _totalItems: number;\r\n  protected _totalPages: number;\r\n  protected inited = false;\r\n  protected _page = 1;\r\n\r\n  constructor(\r\n    private elementRef: ElementRef,\r\n    paginationConfig: PaginationConfig,\r\n    private changeDetection: ChangeDetectorRef\r\n  ) {\r\n    this.elementRef = elementRef;\r\n    if (!this.config) {\r\n      this.configureOptions(paginationConfig.main);\r\n    }\r\n  }\r\n\r\n  configureOptions(config: ConfigModel): void {\r\n    this.config = Object.assign({}, config);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (typeof window !== 'undefined') {\r\n      this.classMap = this.elementRef.nativeElement.getAttribute('class') || '';\r\n    }\r\n    // watch for maxSize\r\n    this.maxSize =\r\n      typeof this.maxSize !== 'undefined' ? this.maxSize : this.config.maxSize;\r\n    this.rotate =\r\n      typeof this.rotate !== 'undefined' ? this.rotate : this.config.rotate;\r\n    this.boundaryLinks =\r\n      typeof this.boundaryLinks !== 'undefined'\r\n        ? this.boundaryLinks\r\n        : this.config.boundaryLinks;\r\n    this.directionLinks =\r\n      typeof this.directionLinks !== 'undefined'\r\n        ? this.directionLinks\r\n        : this.config.directionLinks;\r\n    this.pageBtnClass =\r\n      typeof this.pageBtnClass !== 'undefined'\r\n        ? this.pageBtnClass\r\n        : this.config.pageBtnClass;\r\n\r\n    // base class\r\n    this.itemsPerPage =\r\n      typeof this.itemsPerPage !== 'undefined'\r\n        ? this.itemsPerPage\r\n        : this.config.itemsPerPage;\r\n    this.totalPages = this.calculateTotalPages();\r\n    // this class\r\n    this.pages = this.getPages(this.page, this.totalPages);\r\n    this.inited = true;\r\n  }\r\n\r\n  writeValue(value: number): void {\r\n    this.page = value;\r\n    this.pages = this.getPages(this.page, this.totalPages);\r\n  }\r\n\r\n  getText(key: string): string {\r\n    // tslint:disable-next-line:no-any\r\n    return (this as any)[`${key}Text`] || this.config[`${key}Text`];\r\n  }\r\n\r\n  noPrevious(): boolean {\r\n    return this.page === 1;\r\n  }\r\n\r\n  noNext(): boolean {\r\n    return this.page === this.totalPages;\r\n  }\r\n\r\n  registerOnChange(fn: () => {}): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => {}): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  selectPage(page: number, event?: Event): void {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    if (!this.disabled) {\r\n      if (event && event.target) {\r\n        // tslint:disable-next-line:no-any\r\n        const target: any = event.target;\r\n        target.blur();\r\n      }\r\n      this.writeValue(page);\r\n      this.onChange(this.page);\r\n    }\r\n  }\r\n\r\n  // Create page object used in template\r\n  protected makePage(\r\n    num: number,\r\n    text: string,\r\n    active: boolean\r\n  ): { number: number; text: string; active: boolean } {\r\n    return { text, number: num, active };\r\n  }\r\n\r\n  protected getPages(currentPage: number, totalPages: number): PagesModel[] {\r\n    const pages: PagesModel[] = [];\r\n\r\n    // Default page limits\r\n    let startPage = 1;\r\n    let endPage = totalPages;\r\n    const isMaxSized =\r\n      typeof this.maxSize !== 'undefined' && this.maxSize < totalPages;\r\n\r\n    // recompute if maxSize\r\n    if (isMaxSized) {\r\n      if (this.rotate) {\r\n        // Current page is displayed in the middle of the visible ones\r\n        startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);\r\n        endPage = startPage + this.maxSize - 1;\r\n\r\n        // Adjust if limit is exceeded\r\n        if (endPage > totalPages) {\r\n          endPage = totalPages;\r\n          startPage = endPage - this.maxSize + 1;\r\n        }\r\n      } else {\r\n        // Visible pages are paginated with maxSize\r\n        startPage =\r\n          (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;\r\n\r\n        // Adjust last page if limit is exceeded\r\n        endPage = Math.min(startPage + this.maxSize - 1, totalPages);\r\n      }\r\n    }\r\n\r\n    // Add page number links\r\n    for (let num = startPage; num <= endPage; num++) {\r\n      const page = this.makePage(num, num.toString(), num === currentPage);\r\n      pages.push(page);\r\n    }\r\n\r\n    // Add links to move between page sets\r\n    if (isMaxSized && !this.rotate) {\r\n      if (startPage > 1) {\r\n        const previousPageSet = this.makePage(startPage - 1, '...', false);\r\n        pages.unshift(previousPageSet);\r\n      }\r\n\r\n      if (endPage < totalPages) {\r\n        const nextPageSet = this.makePage(endPage + 1, '...', false);\r\n        pages.push(nextPageSet);\r\n      }\r\n    }\r\n\r\n    return pages;\r\n  }\r\n\r\n  // base class\r\n  protected calculateTotalPages(): number {\r\n    const totalPages =\r\n      this.itemsPerPage < 1\r\n        ? 1\r\n        : Math.ceil(this.totalItems / this.itemsPerPage);\r\n\r\n    return Math.max(totalPages || 0, 1);\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { PaginationConfig } from './pagination.config';\r\n\r\nimport { PagerComponent } from './pager.component';\r\nimport { PaginationComponent } from './pagination.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [PagerComponent, PaginationComponent],\r\n  exports: [PagerComponent, PaginationComponent]\r\n})\r\nexport class PaginationModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return { ngModule: PaginationModule, providers: [PaginationConfig] };\r\n  }\r\n}\r\n"]}