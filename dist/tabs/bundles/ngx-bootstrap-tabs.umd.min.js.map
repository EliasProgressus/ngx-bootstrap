{"version":3,"sources":["ng://ngx-bootstrap/tabs/ng-transclude.directive.ts","ng://ngx-bootstrap/tabs/tabset.config.ts","ng://ngx-bootstrap/tabs/tabset.component.ts","ng://ngx-bootstrap/tabs/tab.directive.ts","ng://ngx-bootstrap/tabs/tab-heading.directive.ts","ng://ngx-bootstrap/tabs/tabs.module.ts"],"names":["NgTranscludeDirective","viewRef","this","prototype","_ngTransclude","templateRef","createEmbeddedView","Directive","args","selector","ViewContainerRef","Input","TabsetConfig","Injectable","TabsetComponent","config","renderer","Object","assign","_vertical","value","setClassMap","_justified","_type","ngOnDestroy","isDestroyed","addTab","tab","tabs","push","active","length","removeTab","options","reselect","emit","index","indexOf","hasAvailableTabs","newActiveIndex","getClosestTabIndex","removed","splice","elementRef","nativeElement","parentNode","removeChild","tabsLength","step","prevIndex","nextIndex","disabled","i","classMap","_a","nav-stacked","vertical","flex-column","nav-justified","justified","type","Component","template","Renderer2","HostBinding","TabDirective","tabset","EventEmitter","_customClass","customClass","_this","split","forEach","cssClass","removeClass","trim","addClass","_active","deselect","setTimeout","deselected","select","selected","ngOnInit","removable","ElementRef","Output","TabHeadingDirective","headingRef","TemplateRef","TabsModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[ngTransclude]'\r\n})\r\nexport class NgTranscludeDirective {\r\n  viewRef: ViewContainerRef;\r\n\r\n  protected _viewRef: ViewContainerRef;\r\n  /* tslint:disable-next-line:no-any */\r\n  protected _ngTransclude: TemplateRef<any>;\r\n\r\n  @Input()\r\n  /* tslint:disable-next-line:no-any */\r\n  set ngTransclude(templateRef: TemplateRef<any>) {\r\n    this._ngTransclude = templateRef;\r\n    if (templateRef) {\r\n      this.viewRef.createEmbeddedView(templateRef);\r\n    }\r\n  }\r\n\r\n  /* tslint:disable-next-line:no-any */\r\n  get ngTransclude(): TemplateRef<any> {\r\n    return this._ngTransclude;\r\n  }\r\n\r\n  constructor(viewRef: ViewContainerRef) {\r\n    this.viewRef = viewRef;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class TabsetConfig {\r\n  /** provides default navigation context class: 'tabs' or 'pills' */\r\n  type = 'tabs';\r\n}\r\n","import { Component, HostBinding, Input, OnDestroy, Renderer2 } from '@angular/core';\r\n\r\nimport { TabDirective } from './tab.directive';\r\nimport { TabsetConfig } from './tabset.config';\r\n// todo: add active event to tab\r\n// todo: fix? mixing static and dynamic tabs position tabs in order of creation\r\n@Component({\r\n  selector: 'tabset',\r\n  templateUrl: './tabset.component.html'\r\n})\r\nexport class TabsetComponent implements OnDestroy {\r\n  /** if true tabs will be placed vertically */\r\n  @Input()\r\n  get vertical(): boolean {\r\n    return this._vertical;\r\n  }\r\n  set vertical(value: boolean) {\r\n    this._vertical = value;\r\n    this.setClassMap();\r\n  }\r\n\r\n  /** if true tabs fill the container and have a consistent width */\r\n  @Input()\r\n  get justified(): boolean {\r\n    return this._justified;\r\n  }\r\n  set justified(value: boolean) {\r\n    this._justified = value;\r\n    this.setClassMap();\r\n  }\r\n\r\n  /** navigation context class: 'tabs' or 'pills' */\r\n  @Input()\r\n  get type(): string {\r\n    return this._type;\r\n  }\r\n  set type(value: string) {\r\n    this._type = value;\r\n    this.setClassMap();\r\n  }\r\n\r\n  @HostBinding('class.tab-container') clazz = true;\r\n\r\n  tabs: TabDirective[] = [];\r\n  classMap: { [key: string]: boolean } = {};\r\n\r\n  protected isDestroyed: boolean;\r\n  protected _vertical: boolean;\r\n  protected _justified: boolean;\r\n  protected _type: string;\r\n\r\n  constructor(config: TabsetConfig, private renderer: Renderer2) {\r\n    Object.assign(this, config);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.isDestroyed = true;\r\n  }\r\n\r\n  addTab(tab: TabDirective): void {\r\n    this.tabs.push(tab);\r\n    tab.active = this.tabs.length === 1 && typeof tab.active === 'undefined';\r\n  }\r\n\r\n  removeTab(\r\n    tab: TabDirective,\r\n    options = { reselect: true, emit: true }\r\n  ): void {\r\n    const index = this.tabs.indexOf(tab);\r\n    if (index === -1 || this.isDestroyed) {\r\n      return;\r\n    }\r\n    // Select a new tab if the tab to be removed is selected and not destroyed\r\n    if (options.reselect && tab.active && this.hasAvailableTabs(index)) {\r\n      const newActiveIndex = this.getClosestTabIndex(index);\r\n      this.tabs[newActiveIndex].active = true;\r\n    }\r\n    if (options.emit) {\r\n      tab.removed.emit(tab);\r\n    }\r\n    this.tabs.splice(index, 1);\r\n    if (tab.elementRef.nativeElement.parentNode) {\r\n      this.renderer.removeChild(\r\n        tab.elementRef.nativeElement.parentNode,\r\n        tab.elementRef.nativeElement\r\n      );\r\n    }\r\n  }\r\n\r\n  protected getClosestTabIndex(index: number): number {\r\n    const tabsLength = this.tabs.length;\r\n    if (!tabsLength) {\r\n      return -1;\r\n    }\r\n\r\n    for (let step = 1; step <= tabsLength; step += 1) {\r\n      const prevIndex = index - step;\r\n      const nextIndex = index + step;\r\n      if (this.tabs[prevIndex] && !this.tabs[prevIndex].disabled) {\r\n        return prevIndex;\r\n      }\r\n      if (this.tabs[nextIndex] && !this.tabs[nextIndex].disabled) {\r\n        return nextIndex;\r\n      }\r\n    }\r\n\r\n    return -1;\r\n  }\r\n\r\n  protected hasAvailableTabs(index: number): boolean {\r\n    const tabsLength = this.tabs.length;\r\n    if (!tabsLength) {\r\n      return false;\r\n    }\r\n\r\n    for (let i = 0; i < tabsLength; i += 1) {\r\n      if (!this.tabs[i].disabled && i !== index) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  protected setClassMap(): void {\r\n    this.classMap = {\r\n      'nav-stacked': this.vertical,\r\n      'flex-column': this.vertical,\r\n      'nav-justified': this.justified,\r\n      [`nav-${this.type}`]: true\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  Output,\r\n  TemplateRef,\r\n  OnInit,\r\n  OnDestroy,\r\n  ElementRef,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport { TabsetComponent } from './tabset.component';\r\n\r\n@Directive({ selector: 'tab, [tab]' })\r\nexport class TabDirective implements OnInit, OnDestroy {\r\n  /** tab header text */\r\n  @Input() heading: string;\r\n  /** tab id. The same id with suffix '-link' will be added to the corresponding &lt;li&gt; element  */\r\n  @HostBinding('attr.id')\r\n  @Input() id: string;\r\n  /** if true tab can not be activated */\r\n  @Input() disabled: boolean;\r\n  /** if true tab can be removable, additional button will appear */\r\n  @Input() removable: boolean;\r\n  /** if set, will be added to the tab's class attribute. Multiple classes are supported. */\r\n  @Input()\r\n  get customClass(): string {\r\n    return this._customClass;\r\n  }\r\n\r\n  set customClass(customClass: string) {\r\n    if (this.customClass) {\r\n      this.customClass.split(' ').forEach((cssClass: string) => {\r\n        this.renderer.removeClass(this.elementRef.nativeElement, cssClass);\r\n      });\r\n    }\r\n\r\n    this._customClass = customClass ? customClass.trim() : null;\r\n\r\n    if (this.customClass) {\r\n      this.customClass.split(' ').forEach((cssClass: string) => {\r\n        this.renderer.addClass(this.elementRef.nativeElement, cssClass);\r\n      });\r\n    }\r\n  }\r\n\r\n  /** tab active state toggle */\r\n  @HostBinding('class.active')\r\n  @Input()\r\n  get active(): boolean {\r\n    return this._active;\r\n  }\r\n\r\n  set active(active: boolean) {\r\n    if (this._active === active) {\r\n      return;\r\n    }\r\n    if ((this.disabled && active) || !active) {\r\n      if (this._active && !active) {\r\n        this.deselect.emit(this);\r\n        setTimeout(() => this.deselected.emit(this), 0);\r\n        this._active = active;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    this._active = active;\r\n    this.select.emit(this);\r\n    setTimeout(() => this.selected.emit(this), 0);\r\n    this.tabset.tabs.forEach((tab: TabDirective) => {\r\n      if (tab !== this) {\r\n        tab.active = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  /** fired when tab became active, $event:Tab equals to selected instance of Tab component */\r\n  @Output() select: EventEmitter<TabDirective> = new EventEmitter();\r\n  /** fired after tab became active, */\r\n  @Output() selected: EventEmitter<TabDirective> = new EventEmitter();\r\n  /** fired when tab became inactive, $event:Tab equals to deselected instance of Tab component */\r\n  @Output() deselect: EventEmitter<TabDirective> = new EventEmitter();\r\n  /** fired after tab became inactive, */\r\n  @Output() deselected: EventEmitter<TabDirective> = new EventEmitter();\r\n  /** fired before tab will be removed, $event:Tab equals to instance of removed tab */\r\n  @Output() removed: EventEmitter<TabDirective> = new EventEmitter();\r\n\r\n  @HostBinding('class.tab-pane') addClass = true;\r\n\r\n  /* tslint:disable-next-line:no-any */\r\n  headingRef: TemplateRef<any>;\r\n  tabset: TabsetComponent;\r\n  protected _active: boolean;\r\n  protected _customClass: string;\r\n\r\n  constructor(\r\n    tabset: TabsetComponent,\r\n    public elementRef: ElementRef,\r\n    public renderer: Renderer2\r\n  ) {\r\n    this.tabset = tabset;\r\n    this.tabset.addTab(this);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.removable = this.removable;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.tabset.removeTab(this, { reselect: false, emit: false });\r\n  }\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\nimport { TabDirective } from './tab.directive';\r\n\r\n/** Should be used to mark <ng-template> element as a template for tab heading */\r\n@Directive({ selector: '[tabHeading]' })\r\nexport class TabHeadingDirective {\r\n  /* tslint:disable-next-line:no-any */\r\n  templateRef: TemplateRef<any>;\r\n\r\n  /* tslint:disable-next-line:no-any */\r\n  constructor(templateRef: TemplateRef<any>, tab: TabDirective) {\r\n    tab.headingRef = templateRef;\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { NgTranscludeDirective } from './ng-transclude.directive';\r\nimport { TabHeadingDirective } from './tab-heading.directive';\r\nimport { TabDirective } from './tab.directive';\r\nimport { TabsetComponent } from './tabset.component';\r\nimport { TabsetConfig } from './tabset.config';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [\r\n    NgTranscludeDirective,\r\n    TabDirective,\r\n    TabsetComponent,\r\n    TabHeadingDirective\r\n  ],\r\n  exports: [\r\n    TabDirective,\r\n    TabsetComponent,\r\n    TabHeadingDirective,\r\n    NgTranscludeDirective\r\n  ]\r\n})\r\nexport class TabsModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: TabsModule,\r\n      providers: [TabsetConfig]\r\n    };\r\n  }\r\n}\r\n"]}