{"version":3,"sources":["ng://ngx-bootstrap/accordion/accordion.config.ts","ng://ngx-bootstrap/accordion/accordion.component.ts","ng://ngx-bootstrap/accordion/accordion-group.component.ts","ng://ngx-bootstrap/accordion/accordion.module.ts"],"names":["Injectable","AccordionComponent","config","Object","assign","this","prototype","closeOtherPanels","openGroup","closeOthers","groups","forEach","group","isOpen","addGroup","push","removeGroup","index","indexOf","splice","Component","args","selector","template","host","[attr.aria-multiselectable]","role","class","style","AccordionConfig","Input","AccordionPanelComponent","accordion","EventEmitter","_isOpen","value","_this","Promise","resolve","then","isOpenChange","emit","catch","error","console","log","defineProperty","isBs3","ngOnInit","panelClass","ngOnDestroy","toggleOpen","isDisabled","decorators","type","Inject","Output","HostBinding","AccordionModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","CollapseModule","declarations","exports"],"mappings":"0jBAQyB,6BAHxBA,EAAAA,+BCgBC,SAAAC,EAAYC,eAFkC,GAG5CC,OAAOC,OAAOC,KAAMH,UAGtBD,EAAAK,UAAAC,iBAAA,SAAiBC,GACVH,KAAKI,aAIVJ,KAAKK,OAAOC,QAAQ,SAACC,GACfA,IAAUJ,IACZI,EAAMC,QAAS,MAKrBZ,EAAAK,UAAAQ,SAAA,SAASF,GACPP,KAAKK,OAAOK,KAAKH,IAGnBX,EAAAK,UAAAU,YAAA,SAAYJ,GACV,IAAMK,EAAQZ,KAAKK,OAAOQ,QAAQN,IACnB,IAAXK,GACFZ,KAAKK,OAAOS,OAAOF,EAAO,wBAvC/BG,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,YACVC,SAAU,4BACVC,KAAM,CACJC,8BAA+B,cAC/BC,KAAM,UACNC,QAAO,cACPC,MAAO,+DAVFC,0CAeNC,EAAAA,2BCgDD,SAAAC,EAAwCC,qBAjCQ,IAAIC,EAAAA,2BA8BhC,EAIlB5B,KAAK2B,UAAYA,+BA5BfD,EAAAzB,UAAA,SAAM,gBACR,OAAOD,KAAK6B,aAGd,SAAWC,GAAX,IAAAC,EAAA/B,KACM8B,IAAU9B,KAAKQ,SACbsB,GACF9B,KAAK2B,UAAUzB,iBAAiBF,MAElCA,KAAK6B,QAAUC,EACfE,QAAQC,QAAQ,MAAMC,KAAK,WACzBH,EAAKI,aAAaC,KAAKN,KAEtBO,SAAM,SAACC,GAENC,QAAQC,IAAIF,uCAKpBxC,OAAA2C,eAAIf,EAAAzB,UAAA,QAAK,KAAT,WACE,OAAOyC,EAAAA,yCAUThB,EAAAzB,UAAA0C,SAAA,WACE3C,KAAK4C,WAAa5C,KAAK4C,YAAc,gBACrC5C,KAAK2B,UAAUlB,SAAST,OAG1B0B,EAAAzB,UAAA4C,YAAA,WACE7C,KAAK2B,UAAUhB,YAAYX,OAG7B0B,EAAAzB,UAAA6C,WAAA,WACO9C,KAAK+C,aACR/C,KAAKQ,QAAUR,KAAKQ,6BApEzBO,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,mCACVC,SAAA,4tBACAC,KAAM,CACJG,QAAO,QACPC,MAAO,+DAbF3B,EAAkBoD,WAAA,CAAA,CAAAC,KA6DZC,EAAAA,OAAMlC,KAAA,CAACpB,yCA3CnB6B,EAAAA,0BAMAA,EAAAA,0BAEAA,EAAAA,4BAEA0B,EAAAA,uBAIAC,EAAAA,YAAWpC,KAAA,CAAC,qBAAkB,CAAAiC,KAC9BxB,EAAAA,cCpCH4B,EAAA,gCAcSA,EAAAC,QAAP,WACE,MAAO,CAAEC,SAAUF,EAAiBG,UAAW,CAAChC,yBAPnDiC,EAAAA,SAAQzC,KAAA,CAAC,CACR0C,QAAS,CAACC,EAAAA,aAAcC,EAAAA,gBACxBC,aAAc,CAACjE,EAAoB8B,GACnCoC,QAAS,CAAClE,EAAoB8B,SAXhC","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * Configuration service, provides default values for the AccordionComponent.\r\n */\r\n@Injectable()\r\nexport class AccordionConfig {\r\n  /** Whether the other panels should be closed when a panel is opened */\r\n  closeOthers: Boolean = false;\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { AccordionPanelComponent } from './accordion-group.component';\r\nimport { AccordionConfig } from './accordion.config';\r\n\r\n/** Displays collapsible content panels for presenting information in a limited amount of space. */\r\n@Component({\r\n  selector: 'accordion',\r\n  template: `<ng-content></ng-content>`,\r\n  host: {\r\n    '[attr.aria-multiselectable]': 'closeOthers',\r\n    role: 'tablist',\r\n    class: 'panel-group',\r\n    style: 'display: block'\r\n  }\r\n})\r\nexport class AccordionComponent {\r\n  /** if `true` expanding one item will close all others */\r\n  @Input() closeOthers: boolean;\r\n\r\n  protected groups: AccordionPanelComponent[] = [];\r\n\r\n  constructor(config: AccordionConfig) {\r\n    Object.assign(this, config);\r\n  }\r\n\r\n  closeOtherPanels(openGroup: AccordionPanelComponent): void {\r\n    if (!this.closeOthers) {\r\n      return;\r\n    }\r\n\r\n    this.groups.forEach((group: AccordionPanelComponent) => {\r\n      if (group !== openGroup) {\r\n        group.isOpen = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  addGroup(group: AccordionPanelComponent): void {\r\n    this.groups.push(group);\r\n  }\r\n\r\n  removeGroup(group: AccordionPanelComponent): void {\r\n    const index = this.groups.indexOf(group);\r\n    if (index !== -1) {\r\n      this.groups.splice(index, 1);\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component, HostBinding, Inject, Input, OnDestroy, OnInit, Output, EventEmitter\r\n} from '@angular/core';\r\nimport { isBs3 } from 'ngx-bootstrap/utils';\r\nimport { AccordionComponent } from './accordion.component';\r\n\r\n/**\r\n * ### Accordion heading\r\n * Instead of using `heading` attribute on the `accordion-group`, you can use\r\n * an `accordion-heading` attribute on `any` element inside of a group that\r\n * will be used as group's header template.\r\n */\r\n@Component({\r\n  selector: 'accordion-group, accordion-panel',\r\n  templateUrl: './accordion-group.component.html',\r\n  host: {\r\n    class: 'panel',\r\n    style: 'display: block'\r\n  }\r\n})\r\nexport class AccordionPanelComponent implements OnInit, OnDestroy {\r\n  /** Clickable text in accordion's group header, check `accordion heading` below for using html in header */\r\n  @Input() heading: string;\r\n  /** Provides an ability to use Bootstrap's contextual panel classes\r\n   * (`panel-primary`, `panel-success`, `panel-info`, etc...).\r\n   * List of all available classes [available here]\r\n   * (https://getbootstrap.com/docs/3.3/components/#panels-alternatives)\r\n   */\r\n  @Input() panelClass: string;\r\n  /** if <code>true</code> â disables accordion group */\r\n  @Input() isDisabled: boolean;\r\n  /** Emits when the opened state changes */\r\n  @Output() isOpenChange: EventEmitter<boolean> = new EventEmitter();\r\n\r\n  // Questionable, maybe .panel-open should be on child div.panel element?\r\n  /** Is accordion group open or closed. This property supports two-way binding */\r\n  @HostBinding('class.panel-open')\r\n  @Input()\r\n  get isOpen(): boolean {\r\n    return this._isOpen;\r\n  }\r\n\r\n  set isOpen(value: boolean) {\r\n    if (value !== this.isOpen) {\r\n      if (value) {\r\n        this.accordion.closeOtherPanels(this);\r\n      }\r\n      this._isOpen = value;\r\n      Promise.resolve(null).then(() => {\r\n        this.isOpenChange.emit(value);\r\n      })\r\n        .catch((error: Error) => {\r\n          /* tslint:disable: no-console */\r\n          console.log(error);\r\n        });\r\n    }\r\n  }\r\n\r\n  get isBs3(): boolean {\r\n    return isBs3();\r\n  }\r\n\r\n  protected _isOpen = false;\r\n  protected accordion: AccordionComponent;\r\n\r\n  constructor(@Inject(AccordionComponent) accordion: AccordionComponent) {\r\n    this.accordion = accordion;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.panelClass = this.panelClass || 'panel-default';\r\n    this.accordion.addGroup(this);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.accordion.removeGroup(this);\r\n  }\r\n\r\n  toggleOpen(): void {\r\n    if (!this.isDisabled) {\r\n      this.isOpen = !this.isOpen;\r\n    }\r\n  }\r\n}\r\n","/* tslint:disable: max-classes-per-file */\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { AccordionComponent } from './accordion.component';\r\nimport { AccordionConfig } from './accordion.config';\r\nimport { AccordionPanelComponent } from './accordion-group.component';\r\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, CollapseModule],\r\n  declarations: [AccordionComponent, AccordionPanelComponent],\r\n  exports: [AccordionComponent, AccordionPanelComponent]\r\n})\r\nexport class AccordionModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return { ngModule: AccordionModule, providers: [AccordionConfig] };\r\n  }\r\n}\r\n"]}