{"version":3,"file":"ngx-bootstrap-accordion.js.map","sources":["ng://ngx-bootstrap/accordion/accordion.config.ts","ng://ngx-bootstrap/accordion/accordion.component.ts","ng://ngx-bootstrap/accordion/accordion-group.component.ts","ng://ngx-bootstrap/accordion/accordion.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * Configuration service, provides default values for the AccordionComponent.\r\n */\r\n@Injectable()\r\nexport class AccordionConfig {\r\n  /** Whether the other panels should be closed when a panel is opened */\r\n  closeOthers: Boolean = false;\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { AccordionPanelComponent } from './accordion-group.component';\r\nimport { AccordionConfig } from './accordion.config';\r\n\r\n/** Displays collapsible content panels for presenting information in a limited amount of space. */\r\n@Component({\r\n  selector: 'accordion',\r\n  template: `<ng-content></ng-content>`,\r\n  host: {\r\n    '[attr.aria-multiselectable]': 'closeOthers',\r\n    role: 'tablist',\r\n    class: 'panel-group',\r\n    style: 'display: block'\r\n  }\r\n})\r\nexport class AccordionComponent {\r\n  /** if `true` expanding one item will close all others */\r\n  @Input() closeOthers: boolean;\r\n\r\n  protected groups: AccordionPanelComponent[] = [];\r\n\r\n  constructor(config: AccordionConfig) {\r\n    Object.assign(this, config);\r\n  }\r\n\r\n  closeOtherPanels(openGroup: AccordionPanelComponent): void {\r\n    if (!this.closeOthers) {\r\n      return;\r\n    }\r\n\r\n    this.groups.forEach((group: AccordionPanelComponent) => {\r\n      if (group !== openGroup) {\r\n        group.isOpen = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  addGroup(group: AccordionPanelComponent): void {\r\n    this.groups.push(group);\r\n  }\r\n\r\n  removeGroup(group: AccordionPanelComponent): void {\r\n    const index = this.groups.indexOf(group);\r\n    if (index !== -1) {\r\n      this.groups.splice(index, 1);\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component, HostBinding, Inject, Input, OnDestroy, OnInit, Output, EventEmitter\r\n} from '@angular/core';\r\nimport { isBs3 } from 'ngx-bootstrap/utils';\r\nimport { AccordionComponent } from './accordion.component';\r\n\r\n/**\r\n * ### Accordion heading\r\n * Instead of using `heading` attribute on the `accordion-group`, you can use\r\n * an `accordion-heading` attribute on `any` element inside of a group that\r\n * will be used as group's header template.\r\n */\r\n@Component({\r\n  selector: 'accordion-group, accordion-panel',\r\n  templateUrl: './accordion-group.component.html',\r\n  host: {\r\n    class: 'panel',\r\n    style: 'display: block'\r\n  }\r\n})\r\nexport class AccordionPanelComponent implements OnInit, OnDestroy {\r\n  /** Clickable text in accordion's group header, check `accordion heading` below for using html in header */\r\n  @Input() heading: string;\r\n  /** Provides an ability to use Bootstrap's contextual panel classes\r\n   * (`panel-primary`, `panel-success`, `panel-info`, etc...).\r\n   * List of all available classes [available here]\r\n   * (https://getbootstrap.com/docs/3.3/components/#panels-alternatives)\r\n   */\r\n  @Input() panelClass: string;\r\n  /** if <code>true</code> â disables accordion group */\r\n  @Input() isDisabled: boolean;\r\n  /** Emits when the opened state changes */\r\n  @Output() isOpenChange: EventEmitter<boolean> = new EventEmitter();\r\n\r\n  // Questionable, maybe .panel-open should be on child div.panel element?\r\n  /** Is accordion group open or closed. This property supports two-way binding */\r\n  @HostBinding('class.panel-open')\r\n  @Input()\r\n  get isOpen(): boolean {\r\n    return this._isOpen;\r\n  }\r\n\r\n  set isOpen(value: boolean) {\r\n    if (value !== this.isOpen) {\r\n      if (value) {\r\n        this.accordion.closeOtherPanels(this);\r\n      }\r\n      this._isOpen = value;\r\n      Promise.resolve(null).then(() => {\r\n        this.isOpenChange.emit(value);\r\n      })\r\n        .catch((error: Error) => {\r\n          /* tslint:disable: no-console */\r\n          console.log(error);\r\n        });\r\n    }\r\n  }\r\n\r\n  get isBs3(): boolean {\r\n    return isBs3();\r\n  }\r\n\r\n  protected _isOpen = false;\r\n  protected accordion: AccordionComponent;\r\n\r\n  constructor(@Inject(AccordionComponent) accordion: AccordionComponent) {\r\n    this.accordion = accordion;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.panelClass = this.panelClass || 'panel-default';\r\n    this.accordion.addGroup(this);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.accordion.removeGroup(this);\r\n  }\r\n\r\n  toggleOpen(): void {\r\n    if (!this.isDisabled) {\r\n      this.isOpen = !this.isOpen;\r\n    }\r\n  }\r\n}\r\n","/* tslint:disable: max-classes-per-file */\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { AccordionComponent } from './accordion.component';\r\nimport { AccordionConfig } from './accordion.config';\r\nimport { AccordionPanelComponent } from './accordion-group.component';\r\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, CollapseModule],\r\n  declarations: [AccordionComponent, AccordionPanelComponent],\r\n  exports: [AccordionComponent, AccordionPanelComponent]\r\n})\r\nexport class AccordionModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return { ngModule: AccordionModule, providers: [AccordionConfig] };\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}
